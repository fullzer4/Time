import { ExecaChildProcess } from 'execa';
declare type LifecycleHook = () => void | Promise<void>;
interface DenoOptions {
    cacheDirectory?: string;
    debug?: boolean;
    onAfterDownload?: LifecycleHook;
    onBeforeDownload?: LifecycleHook;
    useGlobal?: boolean;
    versionRange?: string;
}
interface ProcessRef {
    ps?: ExecaChildProcess<string>;
}
interface RunOptions {
    pipeOutput?: boolean;
}
declare class DenoBridge {
    cacheDirectory: string;
    currentDownload?: ReturnType<DenoBridge['downloadBinary']>;
    debug: boolean;
    onAfterDownload?: LifecycleHook;
    onBeforeDownload?: LifecycleHook;
    useGlobal: boolean;
    versionRange: string;
    constructor(options?: DenoOptions);
    private downloadBinary;
    static getBinaryVersion(binaryPath: string): Promise<string | undefined>;
    private getCachedBinary;
    private getGlobalBinary;
    private getRemoteBinary;
    private log;
    private static runWithBinary;
    private writeVersionFile;
    getBinaryPath(): Promise<{
        global: boolean;
        path: string;
    }>;
    run(args: string[], { pipeOutput }?: RunOptions): Promise<import("execa").ExecaReturnValue<string>>;
    runInBackground(args: string[], pipeOutput?: boolean, ref?: ProcessRef): Promise<void>;
}
export { DenoBridge };
export type { LifecycleHook, ProcessRef };
