"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleNotify = handleNotify;
exports.notify = notify;
exports.sendNotification = sendNotification;

var _handlebars = _interopRequireDefault(require("handlebars"));

var _lodash = _interopRequireDefault(require("lodash"));

var _notifyRequest = require("./notify-request");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function handleNotify(metadata, notifyEntry, remoteUser, publishedPackage) {
  let regex;

  if (metadata.name && notifyEntry.packagePattern) {
    regex = new RegExp(notifyEntry.packagePattern, notifyEntry.packagePatternFlags || '');

    if (!regex.test(metadata.name)) {
      return;
    }
  }

  const template = _handlebars.default.compile(notifyEntry.content); // don't override 'publisher' if package.json already has that

  /* eslint no-unused-vars: 0 */

  /* eslint @typescript-eslint/no-unused-vars: 0 */
  // @ts-ignore


  if (_lodash.default.isNil(metadata.publisher)) {
    // @ts-ignore
    metadata = _objectSpread(_objectSpread({}, metadata), {}, {
      publishedPackage,
      publisher: {
        name: remoteUser.name
      }
    });
  }

  const content = template(metadata);
  const options = {
    body: content,
    url: ''
  }; // provides fallback support, it's accept an Object {} and Array of {}

  if (notifyEntry.headers && _lodash.default.isArray(notifyEntry.headers)) {
    const header = {};
    notifyEntry.headers.map(function (item) {
      if (Object.is(item, item)) {
        for (const key in item) {
          /* eslint no-prototype-builtins: 0 */
          if (item.hasOwnProperty(key)) {
            header[key] = item[key];
          }
        }
      }
    });
    options.headers = header;
  } else if (Object.is(notifyEntry.headers, notifyEntry.headers)) {
    options.headers = notifyEntry.headers;
  }

  options.method = notifyEntry.method;

  if (notifyEntry.endpoint) {
    options.url = notifyEntry.endpoint;
  }

  return (0, _notifyRequest.notifyRequest)(options, content);
}

function sendNotification(metadata, notify, remoteUser, publishedPackage) {
  return handleNotify(metadata, notify, remoteUser, publishedPackage);
}

function notify(metadata, config, remoteUser, publishedPackage) {
  if (config.notify) {
    if (config.notify.content) {
      return sendNotification(metadata, config.notify, remoteUser, publishedPackage);
    } // multiple notifications endpoints PR #108


    return Promise.all(_lodash.default.map(config.notify, key => sendNotification(metadata, key, remoteUser, publishedPackage)));
  }

  return Promise.resolve();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoYW5kbGVOb3RpZnkiLCJtZXRhZGF0YSIsIm5vdGlmeUVudHJ5IiwicmVtb3RlVXNlciIsInB1Ymxpc2hlZFBhY2thZ2UiLCJyZWdleCIsIm5hbWUiLCJwYWNrYWdlUGF0dGVybiIsIlJlZ0V4cCIsInBhY2thZ2VQYXR0ZXJuRmxhZ3MiLCJ0ZXN0IiwidGVtcGxhdGUiLCJIYW5kbGViYXJzIiwiY29tcGlsZSIsImNvbnRlbnQiLCJfIiwiaXNOaWwiLCJwdWJsaXNoZXIiLCJvcHRpb25zIiwiYm9keSIsInVybCIsImhlYWRlcnMiLCJpc0FycmF5IiwiaGVhZGVyIiwibWFwIiwiaXRlbSIsIk9iamVjdCIsImlzIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJtZXRob2QiLCJlbmRwb2ludCIsInNlbmROb3RpZmljYXRpb24iLCJub3RpZnkiLCJjb25maWciLCJQcm9taXNlIiwiYWxsIiwicmVzb2x2ZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvbm90aWZ5L2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBIYW5kbGViYXJzIGZyb20gJ2hhbmRsZWJhcnMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IE9wdGlvbnNXaXRoVXJsIH0gZnJvbSAncmVxdWVzdCc7XG5cbmltcG9ydCB7IENvbmZpZywgUGFja2FnZSwgUmVtb3RlVXNlciB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuXG5pbXBvcnQgeyBub3RpZnlSZXF1ZXN0IH0gZnJvbSAnLi9ub3RpZnktcmVxdWVzdCc7XG5cbnR5cGUgVGVtcGxhdGVNZXRhZGF0YSA9IFBhY2thZ2UgJiB7IHB1Ymxpc2hlZFBhY2thZ2U6IHN0cmluZyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlTm90aWZ5KG1ldGFkYXRhOiBQYWNrYWdlLCBub3RpZnlFbnRyeSwgcmVtb3RlVXNlcjogUmVtb3RlVXNlciwgcHVibGlzaGVkUGFja2FnZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHwgdm9pZCB7XG4gIGxldCByZWdleDtcbiAgaWYgKG1ldGFkYXRhLm5hbWUgJiYgbm90aWZ5RW50cnkucGFja2FnZVBhdHRlcm4pIHtcbiAgICByZWdleCA9IG5ldyBSZWdFeHAobm90aWZ5RW50cnkucGFja2FnZVBhdHRlcm4sIG5vdGlmeUVudHJ5LnBhY2thZ2VQYXR0ZXJuRmxhZ3MgfHwgJycpO1xuICAgIGlmICghcmVnZXgudGVzdChtZXRhZGF0YS5uYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHRlbXBsYXRlID0gSGFuZGxlYmFycy5jb21waWxlKG5vdGlmeUVudHJ5LmNvbnRlbnQpO1xuICAvLyBkb24ndCBvdmVycmlkZSAncHVibGlzaGVyJyBpZiBwYWNrYWdlLmpzb24gYWxyZWFkeSBoYXMgdGhhdFxuICAvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IDAgKi9cbiAgLyogZXNsaW50IEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyczogMCAqL1xuICAvLyBAdHMtaWdub3JlXG4gIGlmIChfLmlzTmlsKG1ldGFkYXRhLnB1Ymxpc2hlcikpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgbWV0YWRhdGEgPSB7IC4uLm1ldGFkYXRhLCBwdWJsaXNoZWRQYWNrYWdlLCBwdWJsaXNoZXI6IHsgbmFtZTogcmVtb3RlVXNlci5uYW1lIGFzIHN0cmluZyB9IH07XG4gIH1cblxuICBjb25zdCBjb250ZW50OiBzdHJpbmcgPSB0ZW1wbGF0ZShtZXRhZGF0YSk7XG5cbiAgY29uc3Qgb3B0aW9uczogT3B0aW9uc1dpdGhVcmwgPSB7XG4gICAgYm9keTogY29udGVudCxcbiAgICB1cmw6ICcnLFxuICB9O1xuXG4gIC8vIHByb3ZpZGVzIGZhbGxiYWNrIHN1cHBvcnQsIGl0J3MgYWNjZXB0IGFuIE9iamVjdCB7fSBhbmQgQXJyYXkgb2Yge31cbiAgaWYgKG5vdGlmeUVudHJ5LmhlYWRlcnMgJiYgXy5pc0FycmF5KG5vdGlmeUVudHJ5LmhlYWRlcnMpKSB7XG4gICAgY29uc3QgaGVhZGVyID0ge307XG4gICAgbm90aWZ5RW50cnkuaGVhZGVycy5tYXAoZnVuY3Rpb24gKGl0ZW0pOiB2b2lkIHtcbiAgICAgIGlmIChPYmplY3QuaXMoaXRlbSwgaXRlbSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaXRlbSkge1xuICAgICAgICAgIC8qIGVzbGludCBuby1wcm90b3R5cGUtYnVpbHRpbnM6IDAgKi9cbiAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBoZWFkZXJba2V5XSA9IGl0ZW1ba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBvcHRpb25zLmhlYWRlcnMgPSBoZWFkZXI7XG4gIH0gZWxzZSBpZiAoT2JqZWN0LmlzKG5vdGlmeUVudHJ5LmhlYWRlcnMsIG5vdGlmeUVudHJ5LmhlYWRlcnMpKSB7XG4gICAgb3B0aW9ucy5oZWFkZXJzID0gbm90aWZ5RW50cnkuaGVhZGVycztcbiAgfVxuXG4gIG9wdGlvbnMubWV0aG9kID0gbm90aWZ5RW50cnkubWV0aG9kO1xuXG4gIGlmIChub3RpZnlFbnRyeS5lbmRwb2ludCkge1xuICAgIG9wdGlvbnMudXJsID0gbm90aWZ5RW50cnkuZW5kcG9pbnQ7XG4gIH1cblxuICByZXR1cm4gbm90aWZ5UmVxdWVzdChvcHRpb25zLCBjb250ZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbmROb3RpZmljYXRpb24obWV0YWRhdGE6IFBhY2thZ2UsIG5vdGlmeTogYW55LCByZW1vdGVVc2VyOiBSZW1vdGVVc2VyLCBwdWJsaXNoZWRQYWNrYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICByZXR1cm4gaGFuZGxlTm90aWZ5KG1ldGFkYXRhLCBub3RpZnksIHJlbW90ZVVzZXIsIHB1Ymxpc2hlZFBhY2thZ2UpIGFzIFByb21pc2U8YW55Pjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vdGlmeShtZXRhZGF0YTogUGFja2FnZSwgY29uZmlnOiBDb25maWcsIHJlbW90ZVVzZXI6IFJlbW90ZVVzZXIsIHB1Ymxpc2hlZFBhY2thZ2U6IHN0cmluZyk6IFByb21pc2U8YW55PiB8IHZvaWQge1xuICBpZiAoY29uZmlnLm5vdGlmeSkge1xuICAgIGlmIChjb25maWcubm90aWZ5LmNvbnRlbnQpIHtcbiAgICAgIHJldHVybiBzZW5kTm90aWZpY2F0aW9uKG1ldGFkYXRhLCBjb25maWcubm90aWZ5IGFzIHVua25vd24gYXMgYW55LCByZW1vdGVVc2VyLCBwdWJsaXNoZWRQYWNrYWdlKTtcbiAgICB9XG4gICAgLy8gbXVsdGlwbGUgbm90aWZpY2F0aW9ucyBlbmRwb2ludHMgUFIgIzEwOFxuICAgIHJldHVybiBQcm9taXNlLmFsbChfLm1hcChjb25maWcubm90aWZ5LCAoa2V5KSA9PiBzZW5kTm90aWZpY2F0aW9uKG1ldGFkYXRhLCBrZXksIHJlbW90ZVVzZXIsIHB1Ymxpc2hlZFBhY2thZ2UpKSk7XG4gIH1cblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUtBOzs7Ozs7Ozs7O0FBSU8sU0FBU0EsWUFBVCxDQUFzQkMsUUFBdEIsRUFBeUNDLFdBQXpDLEVBQXNEQyxVQUF0RCxFQUE4RUMsZ0JBQTlFLEVBQTZIO0VBQ2xJLElBQUlDLEtBQUo7O0VBQ0EsSUFBSUosUUFBUSxDQUFDSyxJQUFULElBQWlCSixXQUFXLENBQUNLLGNBQWpDLEVBQWlEO0lBQy9DRixLQUFLLEdBQUcsSUFBSUcsTUFBSixDQUFXTixXQUFXLENBQUNLLGNBQXZCLEVBQXVDTCxXQUFXLENBQUNPLG1CQUFaLElBQW1DLEVBQTFFLENBQVI7O0lBQ0EsSUFBSSxDQUFDSixLQUFLLENBQUNLLElBQU4sQ0FBV1QsUUFBUSxDQUFDSyxJQUFwQixDQUFMLEVBQWdDO01BQzlCO0lBQ0Q7RUFDRjs7RUFFRCxNQUFNSyxRQUFRLEdBQUdDLG9CQUFXQyxPQUFYLENBQW1CWCxXQUFXLENB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