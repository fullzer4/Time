"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _debug = _interopRequireDefault(require("debug"));

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../../../lib/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = (0, _debug.default)('verdaccio:star');

function _default(storage) {
  const validateInputs = (newUsers, localUsers, username, isStar) => {
    const isExistlocalUsers = _lodash.default.isNil(localUsers[username]) === false;

    if (isStar && isExistlocalUsers && localUsers[username]) {
      return true;
    } else if (!isStar && isExistlocalUsers) {
      return false;
    } else if (!isStar && !isExistlocalUsers) {
      return true;
    }

    return false;
  };

  return (req, res, next) => {
    const name = req.params.package;
    debug('starring a package for %o', name);

    const afterChangePackage = function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.OK);
      next({
        success: true
      });
    };

    storage.getPackage({
      name,
      req,
      callback: function (err, info) {
        if (err) {
          return next(err);
        }

        const newStarUser = req.body[_constants.USERS];
        const remoteUsername = req.remote_user.name;
        const localStarUsers = info[_constants.USERS]; // Check is star or unstar

        const isStar = Object.keys(newStarUser).includes(remoteUsername);

        if (_lodash.default.isNil(localStarUsers) === false && validateInputs(newStarUser, localStarUsers, remoteUsername, isStar)) {
          return afterChangePackage();
        }

        const users = isStar ? _objectSpread(_objectSpread({}, localStarUsers), {}, {
          [remoteUsername]: true
        }) : _lodash.default.reduce(localStarUsers, (users, value, key) => {
          if (key !== remoteUsername) {
            users[key] = value;
          }

          return users;
        }, {});
        storage.changePackage(name, _objectSpread(_objectSpread({}, info), {}, {
          users
        }), req.body._rev, function (err) {
          afterChangePackage(err);
        });
      }
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWJ1ZyIsInN0b3JhZ2UiLCJ2YWxpZGF0ZUlucHV0cyIsIm5ld1VzZXJzIiwibG9jYWxVc2VycyIsInVzZXJuYW1lIiwiaXNTdGFyIiwiaXNFeGlzdGxvY2FsVXNlcnMiLCJfIiwiaXNOaWwiLCJyZXEiLCJyZXMiLCJuZXh0IiwibmFtZSIsInBhcmFtcyIsInBhY2thZ2UiLCJhZnRlckNoYW5nZVBhY2thZ2UiLCJlcnIiLCJzdGF0dXMiLCJIVFRQX1NUQVRVUyIsIk9LIiwic3VjY2VzcyIsImdldFBhY2thZ2UiLCJjYWxsYmFjayIsImluZm8iLCJuZXdTdGFyVXNlciIsImJvZHkiLCJVU0VSUyIsInJlbW90ZVVzZXJuYW1lIiwicmVtb3RlX3VzZXIiLCJsb2NhbFN0YXJVc2VycyIsIk9iamVjdCIsImtleXMiLCJpbmNsdWRlcyIsInVzZXJzIiwicmVkdWNlIiwidmFsdWUiLCJrZXkiLCJjaGFuZ2VQYWNrYWdlIiwiX3JldiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL3N0YXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmltcG9ydCBidWlsZERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyAkTmV4dEZ1bmN0aW9uVmVyLCAkUmVxdWVzdEV4dGVuZCwgSVN0b3JhZ2VIYW5kbGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgSFRUUF9TVEFUVVMsIFVTRVJTIH0gZnJvbSAnLi4vLi4vLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi8uLi8uLi9saWIvbG9nZ2VyJztcblxuY29uc3QgZGVidWcgPSBidWlsZERlYnVnKCd2ZXJkYWNjaW86c3RhcicpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHN0b3JhZ2U6IElTdG9yYWdlSGFuZGxlcik6IChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6IFJlc3BvbnNlLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKSA9PiB2b2lkIHtcbiAgY29uc3QgdmFsaWRhdGVJbnB1dHMgPSAobmV3VXNlcnMsIGxvY2FsVXNlcnMsIHVzZXJuYW1lLCBpc1N0YXIpOiBib29sZWFuID0+IHtcbiAgICBjb25zdCBpc0V4aXN0bG9jYWxVc2VycyA9IF8uaXNOaWwobG9jYWxVc2Vyc1t1c2VybmFtZV0pID09PSBmYWxzZTtcbiAgICBpZiAoaXNTdGFyICYmIGlzRXhpc3Rsb2NhbFVzZXJzICYmIGxvY2FsVXNlcnNbdXNlcm5hbWVdKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCFpc1N0YXIgJiYgaXNFeGlzdGxvY2FsVXNlcnMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCFpc1N0YXIgJiYgIWlzRXhpc3Rsb2NhbFVzZXJzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHJldHVybiAocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiBSZXNwb25zZSwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSByZXEucGFyYW1zLnBhY2thZ2U7XG4gICAgZGVidWcoJ3N0YXJyaW5nIGEgcGFja2FnZSBmb3IgJW8nLCBuYW1lKTtcbiAgICBjb25zdCBhZnRlckNoYW5nZVBhY2thZ2UgPSBmdW5jdGlvbiAoZXJyPzogRXJyb3IpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlcy5zdGF0dXMoSFRUUF9TVEFUVVMuT0spO1xuICAgICAgbmV4dCh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgc3RvcmFnZS5nZXRQYWNrYWdlKHtcbiAgICAgIG5hbWUsXG4gICAgICByZXEsXG4gICAgICBjYWxsYmFjazogZnVuY3Rpb24gKGVyciwgaW5mbykge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdTdGFyVXNlciA9IHJlcS5ib2R5W1VTRVJTXTtcbiAgICAgICAgY29uc3QgcmVtb3RlVXNlcm5hbWUgPSByZXEucmVtb3RlX3VzZXIubmFtZTtcbiAgICAgICAgY29uc3QgbG9jYWxTdGFyVXNlcnMgPSBpbmZvW1VTRVJTXTtcbiAgICAgICAgLy8gQ2hlY2sgaXMgc3RhciBvciB1bnN0YXJcbiAgICAgICAgY29uc3QgaXNTdGFyID0gT2JqZWN0LmtleXMobmV3U3RhclVzZXIpLmluY2x1ZGVzKHJlbW90ZVVzZXJuYW1lKTtcbiAgICAgICAgaWYgKF8uaXNOaWwobG9jYWxTdGFyVXNlcnMpID09PSBmYWxzZSAmJiB2YWxpZGF0ZUlucHV0cyhuZXdTdGFyVXNlciwgbG9jYWxTdGFyVXNlcnMsIHJlbW90ZVVzZXJuYW1lLCBpc1N0YXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGFmdGVyQ2hhbmdlUGFja2FnZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVzZXJzID0gaXNTdGFyXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIC4uLmxvY2FsU3RhclVzZXJzLFxuICAgICAgICAgICAgICBbcmVtb3RlVXNlcm5hbWVdOiB0cnVlLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDogXy5yZWR1Y2UoXG4gICAgICAgICAgICAgIGxvY2FsU3RhclVzZXJzLFxuICAgICAgICAgICAgICAodXNlcnMsIHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSByZW1vdGVVc2VybmFtZSkge1xuICAgICAgICAgICAgICAgICAgdXNlcnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlcnM7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHt9XG4gICAgICAgICAgICApO1xuICAgICAgICBzdG9yYWdlLmNoYW5nZVBhY2thZ2UobmFtZSwgeyAuLi5pbmZvLCB1c2VycyB9LCByZXEuYm9keS5fcmV2LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgYWZ0ZXJDaGFuZ2VQYWNrYWdlKGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztBQUVBOztBQUdBOzs7Ozs7Ozs7O0FBR0EsTUFBTUEsS0FBSyxHQUFHLG9CQUFXLGdCQUFYLENBQWQ7O0FBQ2Usa0JBQVVDLE9BQVYsRUFBMEc7RUFDdkgsTUFBTUMsY0FBYyxHQUFHLENBQUNDLFFBQUQsRUFBV0MsVUFBWCxFQUF1QkMsUUFBdkIsRUFBaUNDLE1BQWpDLEtBQXFEO0lBQzFFLE1BQU1DLGlCQUFpQixHQUFHQyxnQkFBRUMsS0FBRixDQUFRTCxVQUFVLENBQUNDLFFBQUQsQ0FBbEIsTUFBa0MsS0FBNUQ7O0lBQ0EsSUFBSUMsTUFBTSxJQUFJQyxpQkFBVixJQUErQkgsVUFBVSxDQUFDQyxRQUFELENBQTdDLEVBQXlEO01BQ3ZELE9BQU8sSUFBUDtJQUNELENBRkQsTUFFTyxJQUFJLENBQUNDLE1BQUQsSUFBV0MsaUJBQWYsRUFBa0M7TUFDdkMsT0FBTyxLQUFQO0lBQ0QsQ0FGTSxNQUVBLElBQUksQ0FBQ0QsTUFBRCxJQUFXLENBQUNDLGlCQUFoQixFQUFtQztNQUN4QyxPQUFPLElBQVA7SUFDRDs7SUFDRCxPQUFPLEtBQVA7RUFDRCxDQVZEOztFQVlBLE9BQU8sQ0FBQ0csR0FBRCxFQUFzQkMsR0FBdEIsRUFBcUNDLElBQXJDLEtBQXNFO0lBQzNFLE1BQU1DLElBQUksR0FBR0gsR0FBRyxDQUFDSSxNQUFKLENBQVdDLE9BQXhCO0lBQ0FmLEtBQUssQ0FBQywyQkFBRCxFQUE4QmEsSUFBOUIsQ0FBTDs7SUFDQSxNQUFNRyxrQkFBa0IsR0FBRyxVQUFVQyxHQUFWLEVBQXVCO01BQ2hELElBQUlBLEdBQUosRUFBUztRQUNQLE9BQU9MLElBQUksQ0FBQ0ssR0FBRCxDQUFYO01BQ0Q7O01BQ0ROLEdBQUcsQ0FBQ08sTUFBSixDQUFXQyx1QkFBWUMsRUFBdkI7TUFDQVIsSUFBSSxDQUFDO1FBQ0hTLE9BQU8sRUFBRTtNQUROLENBQUQsQ0FBSjtJQUdELENBUkQ7O0lBVUFwQixPQUFPLENBQUNxQixVQUFSLENBQW1CO01BQ2pCVCxJQURpQjtNQUVqQkgsR0FGaUI7TUFHakJhLFFBQVEsRUFBRSxVQUFVTixHQUFWLEVBQWVPLElBQWYsRUFBcUI7UUFDN0IsSUFBSVAsR0FBSixFQUFTO1VBQ1AsT0FBT0wsSUFBSSxDQUFDSyxHQUFELENBQVg7UUFDRDs7UUFDRCxNQUFNUSxXQUFXLEdBQUdmLEdBQUcsQ0FBQ2dCLElBQUosQ0FBU0MsZ0JBQVQsQ0FBcEI7UUFDQSxNQUFNQyxjQUFjLEdBQUdsQixHQUFHLENBQUNtQixXQUFKLENBQWdCaEIsSUFBdkM7UUFDQSxNQUFNaUIsY0FBYyxHQUFHTixJQUFJLENBQUNHLGdCQUFELENBQTNCLENBTjZCLENBTzdCOztRQUNBLE1BQU1yQixNQUFNLEdBQUd5QixNQUFNLENBQUNDLElBQVAsQ0FBWVAsV0FBWixFQUF5QlEsUUFBekIsQ0FBa0NMLGNBQWxDLENBQWY7O1FBQ0EsSUFBSXBCLGdCQUFFQyxLQUFGLENBQVFxQixjQUFSLE1BQTRCLEtBQTVCLElBQXFDNUIsY0FBYyxDQUFDdUIsV0FBRCxFQUFjSyxjQUFkLEVBQThCRixjQUE5QixFQUE4Q3RCLE1BQTlDLENBQXZELEVBQThHO1VBQzVHLE9BQU9VLGtCQUFrQixFQUF6QjtRQUNEOztRQUNELE1BQU1rQixLQUFLLEdBQUc1QixNQUFNLG1DQUVYd0IsY0FGVztVQUdkLENBQUNGLGNBQUQsR0FBa0I7UUFISixLQUtoQnBCLGdCQUFFMkIsTUFBRixDQUNFTCxjQURGLEVBRUUsQ0FBQ0ksS0FBRCxFQUFRRSxLQUFSLEVBQWVDLEdBQWYsS0FBdUI7VUFDckIsSUFBSUEsR0FBRyxLQUFLVCxjQUFaLEVBQTRCO1lBQzFCTSxLQUFLLENBQUNHLEdBQUQsQ0FBTCxHQUFhRCxLQUFiO1VBQ0Q7O1VBQ0QsT0FBT0YsS0FBUDtRQUNELENBUEgsRUFRRSxFQVJGLENBTEo7UUFlQWpDLE9BQU8sQ0FBQ3FDLGFBQVIsQ0FBc0J6QixJQUF0QixrQ0FBaUNXLElBQWpDO1VBQXVDVTtRQUF2QyxJQUFnRHhCLEdBQUcsQ0FBQ2dCLElBQUosQ0FBU2EsSUFBekQsRUFBK0QsVUFBVXRCLEdBQVYsRUFBZTtVQUM1RUQsa0JBQWtCLENBQUNDLEdBQUQsQ0FBbEI7UUFDRCxDQUZEO01BR0Q7SUFqQ2dCLENBQW5CO0VBbUNELENBaEREO0FBaUREIn0=