"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _lodash = _interopRequireDefault(require("lodash"));

var _mime = _interopRequireDefault(require("mime"));

var _constants = require("../../../lib/constants");

var _middleware = require("../../middleware");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(route, auth, storage) {
  const can = (0, _middleware.allow)(auth);

  const tag_package_version = function (req, res, next) {
    if (_lodash.default.isString(req.body) === false) {
      return next('route');
    }

    const tags = {};
    tags[req.params.tag] = req.body;
    storage.mergeTags(req.params.package, tags, function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.CREATED);
      return next({
        ok: _constants.API_MESSAGE.TAG_ADDED
      });
    });
  }; // tagging a package


  route.put('/:package/:tag', can('publish'), (0, _middleware.media)(_mime.default.getType('json')), tag_package_version);
  route.post('/-/package/:package/dist-tags/:tag', can('publish'), (0, _middleware.media)(_mime.default.getType('json')), tag_package_version);
  route.put('/-/package/:package/dist-tags/:tag', can('publish'), (0, _middleware.media)(_mime.default.getType('json')), tag_package_version);
  route.delete('/-/package/:package/dist-tags/:tag', can('publish'), function (req, res, next) {
    const tags = {};
    tags[req.params.tag] = null;
    storage.mergeTags(req.params.package, tags, function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.CREATED);
      return next({
        ok: _constants.API_MESSAGE.TAG_REMOVED
      });
    });
  });
  route.get('/-/package/:package/dist-tags', can('access'), function (req, res, next) {
    storage.getPackage({
      name: req.params.package,
      uplinksLook: true,
      req,
      callback: function (err, info) {
        if (err) {
          return next(err);
        }

        next(info[_constants.DIST_TAGS]);
      }
    });
  });
  route.post('/-/package/:package/dist-tags', can('publish'), function (req, res, next) {
    storage.mergeTags(req.params.package, req.body, function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.CREATED);
      return next({
        ok: _constants.API_MESSAGE.TAG_UPDATED
      });
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyb3V0ZSIsImF1dGgiLCJzdG9yYWdlIiwiY2FuIiwidGFnX3BhY2thZ2VfdmVyc2lvbiIsInJlcSIsInJlcyIsIm5leHQiLCJfIiwiaXNTdHJpbmciLCJib2R5IiwidGFncyIsInBhcmFtcyIsInRhZyIsIm1lcmdlVGFncyIsInBhY2thZ2UiLCJlcnIiLCJzdGF0dXMiLCJIVFRQX1NUQVRVUyIsIkNSRUFURUQiLCJvayIsIkFQSV9NRVNTQUdFIiwiVEFHX0FEREVEIiwicHV0IiwibWltZSIsImdldFR5cGUiLCJwb3N0IiwiZGVsZXRlIiwiVEFHX1JFTU9WRUQiLCJnZXQiLCJnZXRQYWNrYWdlIiwibmFtZSIsInVwbGlua3NMb29rIiwiY2FsbGJhY2siLCJpbmZvIiwiRElTVF9UQUdTIiwiVEFHX1VQREFURUQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL2VuZHBvaW50L2FwaS9kaXN0LXRhZ3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IG1pbWUgZnJvbSAnbWltZSc7XG5cbmltcG9ydCB7IFZlcmRhY2Npb0Vycm9yIH0gZnJvbSAnQHZlcmRhY2Npby9jb21tb25zLWFwaSc7XG5pbXBvcnQgeyBQYWNrYWdlIH0gZnJvbSAnQHZlcmRhY2Npby90eXBlcyc7XG5cbmltcG9ydCB7ICROZXh0RnVuY3Rpb25WZXIsICRSZXF1ZXN0RXh0ZW5kLCAkUmVzcG9uc2VFeHRlbmQsIElBdXRoLCBJU3RvcmFnZUhhbmRsZXIgfSBmcm9tICcuLi8uLi8uLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBBUElfTUVTU0FHRSwgRElTVF9UQUdTLCBIVFRQX1NUQVRVUyB9IGZyb20gJy4uLy4uLy4uL2xpYi9jb25zdGFudHMnO1xuaW1wb3J0IHsgYWxsb3csIG1lZGlhIH0gZnJvbSAnLi4vLi4vbWlkZGxld2FyZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChyb3V0ZTogUm91dGVyLCBhdXRoOiBJQXV0aCwgc3RvcmFnZTogSVN0b3JhZ2VIYW5kbGVyKTogdm9pZCB7XG4gIGNvbnN0IGNhbiA9IGFsbG93KGF1dGgpO1xuICBjb25zdCB0YWdfcGFja2FnZV92ZXJzaW9uID0gZnVuY3Rpb24gKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogJE5leHRGdW5jdGlvblZlciB7XG4gICAgaWYgKF8uaXNTdHJpbmcocmVxLmJvZHkpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIG5leHQoJ3JvdXRlJyk7XG4gICAgfVxuXG4gICAgY29uc3QgdGFncyA9IHt9O1xuICAgIHRhZ3NbcmVxLnBhcmFtcy50YWddID0gcmVxLmJvZHk7XG4gICAgc3RvcmFnZS5tZXJnZVRhZ3MocmVxLnBhcmFtcy5wYWNrYWdlLCB0YWdzLCBmdW5jdGlvbiAoZXJyOiBFcnJvcik6ICROZXh0RnVuY3Rpb25WZXIge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gbmV4dChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzLnN0YXR1cyhIVFRQX1NUQVRVUy5DUkVBVEVEKTtcbiAgICAgIHJldHVybiBuZXh0KHsgb2s6IEFQSV9NRVNTQUdFLlRBR19BRERFRCB9KTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyB0YWdnaW5nIGEgcGFja2FnZVxuICByb3V0ZS5wdXQoJy86cGFja2FnZS86dGFnJywgY2FuKCdwdWJsaXNoJyksIG1lZGlhKG1pbWUuZ2V0VHlwZSgnanNvbicpKSwgdGFnX3BhY2thZ2VfdmVyc2lvbik7XG5cbiAgcm91dGUucG9zdCgnLy0vcGFja2FnZS86cGFja2FnZS9kaXN0LXRhZ3MvOnRhZycsIGNhbigncHVibGlzaCcpLCBtZWRpYShtaW1lLmdldFR5cGUoJ2pzb24nKSksIHRhZ19wYWNrYWdlX3ZlcnNpb24pO1xuXG4gIHJvdXRlLnB1dCgnLy0vcGFja2FnZS86cGFja2FnZS9kaXN0LXRhZ3MvOnRhZycsIGNhbigncHVibGlzaCcpLCBtZWRpYShtaW1lLmdldFR5cGUoJ2pzb24nKSksIHRhZ19wYWNrYWdlX3ZlcnNpb24pO1xuXG4gIHJvdXRlLmRlbGV0ZSgnLy0vcGFja2FnZS86cGFja2FnZS9kaXN0LXRhZ3MvOnRhZycsIGNhbigncHVibGlzaCcpLCBmdW5jdGlvbiAocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiAkUmVzcG9uc2VFeHRlbmQsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgICBjb25zdCB0YWdzID0ge307XG4gICAgdGFnc1tyZXEucGFyYW1zLnRhZ10gPSBudWxsO1xuICAgIHN0b3JhZ2UubWVyZ2VUYWdzKHJlcS5wYXJhbXMucGFja2FnZSwgdGFncywgZnVuY3Rpb24gKGVycjogVmVyZGFjY2lvRXJyb3IpOiAkTmV4dEZ1bmN0aW9uVmVyIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlcy5zdGF0dXMoSFRUUF9TVEFUVVMuQ1JFQVRFRCk7XG4gICAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgIG9rOiBBUElfTUVTU0FHRS5UQUdfUkVNT1ZFRCxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICByb3V0ZS5nZXQoJy8tL3BhY2thZ2UvOnBhY2thZ2UvZGlzdC10YWdzJywgY2FuKCdhY2Nlc3MnKSwgZnVuY3Rpb24gKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgc3RvcmFnZS5nZXRQYWNrYWdlKHtcbiAgICAgIG5hbWU6IHJlcS5wYXJhbXMucGFja2FnZSxcbiAgICAgIHVwbGlua3NMb29rOiB0cnVlLFxuICAgICAgcmVxLFxuICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChlcnI6IFZlcmRhY2Npb0Vycm9yLCBpbmZvOiBQYWNrYWdlKTogJE5leHRGdW5jdGlvblZlciB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dChpbmZvW0RJU1RfVEFHU10pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgcm91dGUucG9zdCgnLy0vcGFja2FnZS86cGFja2FnZS9kaXN0LXRhZ3MnLCBjYW4oJ3B1Ymxpc2gnKSwgZnVuY3Rpb24gKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgc3RvcmFnZS5tZXJnZVRhZ3MocmVxLnBhcmFtcy5wYWNrYWdlLCByZXEuYm9keSwgZnVuY3Rpb24gKGVycjogVmVyZGFjY2lvRXJyb3IpOiAkTmV4dEZ1bmN0aW9uVmVyIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlcy5zdGF0dXMoSFRUUF9TVEFUVVMuQ1JFQVRFRCk7XG4gICAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgIG9rOiBBUElfTUVTU0FHRS5UQUdfVVBEQVRFRCxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztBQUNBOztBQU1BOztBQUNBOzs7O0FBRWUsa0JBQVVBLEtBQVYsRUFBeUJDLElBQXpCLEVBQXNDQyxPQUF0QyxFQUFzRTtFQUNuRixNQUFNQyxHQUFHLEdBQUcsdUJBQU1GLElBQU4sQ0FBWjs7RUFDQSxNQUFNRyxtQkFBbUIsR0FBRyxVQUFVQyxHQUFWLEVBQStCQyxHQUEvQixFQUFxREMsSUFBckQsRUFBK0Y7SUFDekgsSUFBSUMsZ0JBQUVDLFFBQUYsQ0FBV0osR0FBRyxDQUFDSyxJQUFmLE1BQXlCLEtBQTdCLEVBQW9DO01BQ2xDLE9BQU9ILElBQUksQ0FBQyxPQUFELENBQVg7SUFDRDs7SUFFRCxNQUFNSSxJQUFJLEdBQUcsRUFBYjtJQUNBQSxJQUFJLENBQUNOLEdBQUcsQ0FBQ08sTUFBSixDQUFXQyxHQUFaLENBQUosR0FBdUJSLEdBQUcsQ0FBQ0ssSUFBM0I7SUFDQVIsT0FBTyxDQUFDWSxTQUFSLENBQWtCVCxHQUFHLENBQUNPLE1BQUosQ0FBV0csT0FBN0IsRUFBc0NKLElBQXRDLEVBQTRDLFVBQVVLLEdBQVYsRUFBd0M7TUFDbEYsSUFBSUEsR0FBSixFQUFTO1FBQ1AsT0FBT1QsSUFBSSxDQUFDUyxHQUFELENBQVg7TUFDRDs7TUFDRFYsR0FBRyxDQUFDVyxNQUFKLENBQVdDLHVCQUFZQyxPQUF2QjtNQUNBLE9BQU9aLElBQUksQ0FBQztRQUFFYSxFQUFFLEVBQUVDLHVCQUFZQztNQUFsQixDQUFELENBQVg7SUFDRCxDQU5EO0VBT0QsQ0FkRCxDQUZtRixDQWtCbkY7OztFQUNBdEIsS0FBSyxDQUFDdUIsR0FBTixDQUFVLGdCQUFWLEVBQTRCcEIsR0FBRyxDQUFDLFNBQUQsQ0FBL0IsRUFBNEMsdUJBQU1xQixjQUFLQyxPQUFMLENBQWEsTUFBYixDQUFOLENBQTVDLEVBQXlFckIsbUJBQXpFO0VBRUFKLEtBQUssQ0FBQzBCLElBQU4sQ0FBVyxvQ0FBWCxFQUFpRHZCLEdBQUcsQ0FBQyxTQUFELENBQXBELEVBQWlFLHVCQUFNcUIsY0FBS0MsT0FBTCxDQUFhLE1BQWIsQ0FBTixDQUFqRSxFQUE4RnJCLG1CQUE5RjtFQUVBSixLQUFLLENBQUN1QixHQUFOLENBQVUsb0NBQVYsRUFBZ0RwQixHQUFHLENBQUMsU0FBRCxDQUFuRCxFQUFnRSx1QkFBTXFCLGNBQUtDLE9BQUwsQ0FBYSxNQUFiLENBQU4sQ0FBaEUsRUFBNkZyQixtQkFBN0Y7RUFFQUosS0FBSyxDQUFDMkIsTUFBTixDQUFhLG9DQUFiLEVBQW1EeEIsR0FBRyxDQUFDLFNBQUQsQ0FBdEQsRUFBbUUsVUFBVUUsR0FBVixFQUErQkMsR0FBL0IsRUFBcURDLElBQXJELEVBQW1GO0lBQ3BKLE1BQU1JLElBQUksR0FBRyxFQUFiO0lBQ0FBLElBQUksQ0FBQ04sR0FBRyxDQUFDTyxNQUFKLENBQVdDLEdBQVosQ0FBSixHQUF1QixJQUF2QjtJQUNBWCxPQUFPLENBQUNZLFNBQVIsQ0FBa0JULEdBQUcsQ0FBQ08sTUFBSixDQUFXRyxPQUE3QixFQUFzQ0osSUFBdEMsRUFBNEMsVUFBVUssR0FBVixFQUFpRDtNQUMzRixJQUFJQSxHQUFKLEVBQVM7UUFDUCxPQUFPVCxJQUFJLENBQUNTLEdBQUQsQ0FBWDtNQUNEOztNQUNEVixHQUFHLENBQUNXLE1BQUosQ0FBV0MsdUJBQVlDLE9BQXZCO01BQ0EsT0FBT1osSUFBSSxDQUFDO1FBQ1ZhLEVBQUUsRUFBRUMsdUJBQVlPO01BRE4sQ0FBRCxDQUFYO0lBR0QsQ0FSRDtFQVNELENBWkQ7RUFjQTVCLEtBQUssQ0FBQzZCLEdBQU4sQ0FBVSwrQkFBVixFQUEyQzFCLEdBQUcsQ0FBQyxRQUFELENBQTlDLEVBQTBELFVBQVVFLEdBQVYsRUFBK0JDLEdBQS9CLEVBQXFEQyxJQUFyRCxFQUFtRjtJQUMzSUwsT0FBTyxDQUFDNEIsVUFBUixDQUFtQjtNQUNqQkMsSUFBSSxFQUFFMUIsR0FBRyxDQUFDTyxNQUFKLENBQVdHLE9BREE7TUFFakJpQixXQUFXLEVBQUUsSUFGSTtNQUdqQjNCLEdBSGlCO01BSWpCNEIsUUFBUSxFQUFFLFVBQVVqQixHQUFWLEVBQStCa0IsSUFBL0IsRUFBZ0U7UUFDeEUsSUFBSWxCLEdBQUosRUFBUztVQUNQLE9BQU9ULElBQUksQ0FBQ1MsR0FBRCxDQUFYO1FBQ0Q7O1FBRURULElBQUksQ0FBQzJCLElBQUksQ0FBQ0Msb0JBQUQsQ0FBTCxDQUFKO01BQ0Q7SUFWZ0IsQ0FBbkI7RUFZRCxDQWJEO0VBZUFuQyxLQUFLLENBQUMwQixJQUFOLENBQVcsK0JBQVgsRUFBNEN2QixHQUFHLENBQUMsU0FBRCxDQUEvQyxFQUE0RCxVQUFVRSxHQUFWLEVBQStCQyxHQUEvQixFQUFxREMsSUFBckQsRUFBbUY7SUFDN0lMLE9BQU8sQ0FBQ1ksU0FBUixDQUFrQlQsR0FBRyxDQUFDTyxNQUFKLENBQVdHLE9BQTdCLEVBQXNDVixHQUFHLENBQUNLLElBQTFDLEVBQWdELFVBQVVNLEdBQVYsRUFBaUQ7TUFDL0YsSUFBSUEsR0FBSixFQUFTO1FBQ1AsT0FBT1QsSUFBSSxDQUFDUyxHQUFELENBQVg7TUFDRDs7TUFDRFYsR0FBRyxDQUFDVyxNQUFKLENBQVdDLHVCQUFZQyxPQUF2QjtNQUNBLE9BQU9aLElBQUksQ0FBQztRQUNWYSxFQUFFLEVBQUVDLHVCQUFZZTtNQUROLENBQUQsQ0FBWDtJQUdELENBUkQ7RUFTRCxDQVZEO0FBV0QifQ==