"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.loadTheme = loadTheme;
exports.validatePrimaryColor = validatePrimaryColor;

var _debug = _interopRequireDefault(require("debug"));

var _express = _interopRequireDefault(require("express"));

var _fs = _interopRequireDefault(require("fs"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _constants = require("../../lib/constants");

var _logger = require("../../lib/logger");

var _pluginLoader = _interopRequireDefault(require("../../lib/plugin-loader"));

var _search = _interopRequireDefault(require("../../lib/search"));

var _utils = require("../../lib/utils");

var _renderHTML = _interopRequireDefault(require("./html/renderHTML"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  setSecurityWebHeaders
} = require('../middleware');

const debug = (0, _debug.default)('verdaccio');

function loadTheme(config) {
  if (_lodash.default.isNil(config.theme) === false) {
    return _lodash.default.head((0, _pluginLoader.default)(config, config.theme, {}, function (plugin) {
      return plugin.staticPath && plugin.manifest && plugin.manifestFiles;
    }, 'verdaccio-theme'));
  }
}

function validatePrimaryColor(primaryColor) {
  const isHex = /^#+([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/i.test(primaryColor);

  if (!isHex) {
    debug('invalid primary color %o', primaryColor);
    return;
  }

  return primaryColor;
}

const sendFileCallback = next => err => {
  if (!err) {
    return;
  }

  if (err.status === _constants.HTTP_STATUS.NOT_FOUND) {
    next();
  } else {
    next(err);
  }
};

function _default(config, auth, storage) {
  var _config$web, _config$web2;

  let {
    staticPath,
    manifest,
    manifestFiles
  } = loadTheme(config) || require('@verdaccio/ui-theme')();

  debug('static path %o', staticPath);

  _search.default.configureStorage(storage);
  /* eslint new-cap:off */


  const router = _express.default.Router(); // run in production mode by default, just in case
  // it shouldn't make any difference anyway


  router.use(auth.webUIJWTmiddleware());
  router.use(setSecurityWebHeaders); // static assets

  router.get('/-/static/*', function (req, res, next) {
    const filename = req.params[0];
    const file = `${staticPath}/${filename}`;
    debug('render static file %o', file);
    res.sendFile(file, sendFileCallback(next));
  }); // logo

  if (config !== null && config !== void 0 && (_config$web = config.web) !== null && _config$web !== void 0 && _config$web.logo && !(0, _utils.isHTTPProtocol)(config === null || config === void 0 ? void 0 : (_config$web2 = config.web) === null || _config$web2 === void 0 ? void 0 : _config$web2.logo)) {
    // URI related to a local file
    const absoluteLocalFile = _path.default.posix.resolve(config.web.logo);

    debug('serve local logo %s', absoluteLocalFile);

    try {
      if (_fs.default.existsSync(absoluteLocalFile) && typeof _fs.default.accessSync(absoluteLocalFile, _fs.default.constants.R_OK) === 'undefined') {
        // Note: `path.join` will break on Windows, because it transforms `/` to `\`
        // Use POSIX version `path.posix.join` instead.
        config.web.logo = _path.default.posix.join('/-/static/', _path.default.basename(config.web.logo));
        router.get(config.web.logo, function (_req, res, next) {
          // @ts-ignore
          debug('serve custom logo  web:%s - local:%s', config.web.logo, absoluteLocalFile);
          res.sendFile(absoluteLocalFile, sendFileCallback(next));
        });
        debug('enabled custom logo %s', config.web.logo);
      } else {
        config.web.logo = undefined;

        _logger.logger.warn(`web logo is wrong, path ${absoluteLocalFile} does not exist or is not readable`);
      }
    } catch {
      config.web.logo = undefined;

      _logger.logger.warn(`web logo is wrong, path ${absoluteLocalFile} does not exist or is not readable`);
    }
  }

  router.get('/-/web/:section/*', function (req, res) {
    (0, _renderHTML.default)(config, manifest, manifestFiles, req, res);
    debug('render html section');
  });
  router.get('/', function (req, res, next) {
    (0, _renderHTML.default)(config, manifest, manifestFiles, req, res);
    debug('render root');
  });
  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,