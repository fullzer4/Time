"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = require("express");

var _constants = require("../../../lib/constants");

var _search = _interopRequireDefault(require("../../../lib/search"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @prettier
 * @flow
 */
function addSearchWebApi(storage, auth) {
  const route = (0, _express.Router)();
  /* eslint new-cap: 0 */
  // Search package

  route.get('/search/:anything', function (req, res, next) {
    const results = _search.default.query(req.params.anything); // FUTURE: figure out here the correct type


    const packages = [];

    const getPackageInfo = function (i) {
      storage.getPackage({
        name: results[i].ref,
        uplinksLook: false,
        callback: (err, entry) => {
          if (!err && entry) {
            auth.allow_access({
              packageName: entry.name
            }, req.remote_user, function (err, allowed) {
              if (err || !allowed) {
                return;
              }

              packages.push(entry.versions[entry[_constants.DIST_TAGS].latest]);
            });
          }

          if (i >= results.length - 1) {
            next(packages);
          } else {
            getPackageInfo(i + 1);
          }
        }
      });
    };

    if (results.length) {
      getPackageInfo(0);
    } else {
      next([]);
    }
  });
  return route;
}

var _default = addSearchWebApi;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhZGRTZWFyY2hXZWJBcGkiLCJzdG9yYWdlIiwiYXV0aCIsInJvdXRlIiwiZ2V0IiwicmVxIiwicmVzIiwibmV4dCIsInJlc3VsdHMiLCJTZWFyY2giLCJxdWVyeSIsInBhcmFtcyIsImFueXRoaW5nIiwicGFja2FnZXMiLCJnZXRQYWNrYWdlSW5mbyIsImkiLCJnZXRQYWNrYWdlIiwibmFtZSIsInJlZiIsInVwbGlua3NMb29rIiwiY2FsbGJhY2siLCJlcnIiLCJlbnRyeSIsImFsbG93X2FjY2VzcyIsInBhY2thZ2VOYW1lIiwicmVtb3RlX3VzZXIiLCJhbGxvd2VkIiwicHVzaCIsInZlcnNpb25zIiwiRElTVF9UQUdTIiwibGF0ZXN0IiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaS93ZWIvZW5kcG9pbnQvc2VhcmNoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByZXR0aWVyXG4gKiBAZmxvd1xuICovXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcblxuaW1wb3J0IHsgUGFja2FnZSB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuXG5pbXBvcnQgeyAkTmV4dEZ1bmN0aW9uVmVyLCAkUmVxdWVzdEV4dGVuZCwgJFJlc3BvbnNlRXh0ZW5kLCBJQXV0aCwgSVN0b3JhZ2VIYW5kbGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgRElTVF9UQUdTIH0gZnJvbSAnLi4vLi4vLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgU2VhcmNoIGZyb20gJy4uLy4uLy4uL2xpYi9zZWFyY2gnO1xuXG5mdW5jdGlvbiBhZGRTZWFyY2hXZWJBcGkoc3RvcmFnZTogSVN0b3JhZ2VIYW5kbGVyLCBhdXRoOiBJQXV0aCk6IFJvdXRlciB7XG4gIGNvbnN0IHJvdXRlID0gUm91dGVyKCk7IC8qIGVzbGludCBuZXctY2FwOiAwICovXG4gIC8vIFNlYXJjaCBwYWNrYWdlXG4gIHJvdXRlLmdldCgnL3NlYXJjaC86YW55dGhpbmcnLCBmdW5jdGlvbiAocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiAkUmVzcG9uc2VFeHRlbmQsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgICBjb25zdCByZXN1bHRzOiBhbnkgPSBTZWFyY2gucXVlcnkocmVxLnBhcmFtcy5hbnl0aGluZyk7XG4gICAgLy8gRlVUVVJFOiBmaWd1cmUgb3V0IGhlcmUgdGhlIGNvcnJlY3QgdHlwZVxuICAgIGNvbnN0IHBhY2thZ2VzOiBhbnlbXSA9IFtdO1xuXG4gICAgY29uc3QgZ2V0UGFja2FnZUluZm8gPSBmdW5jdGlvbiAoaSk6IHZvaWQge1xuICAgICAgc3RvcmFnZS5nZXRQYWNrYWdlKHtcbiAgICAgICAgbmFtZTogcmVzdWx0c1tpXS5yZWYsXG4gICAgICAgIHVwbGlua3NMb29rOiBmYWxzZSxcbiAgICAgICAgY2FsbGJhY2s6IChlcnIsIGVudHJ5OiBQYWNrYWdlKTogdm9pZCA9PiB7XG4gICAgICAgICAgaWYgKCFlcnIgJiYgZW50cnkpIHtcbiAgICAgICAgICAgIGF1dGguYWxsb3dfYWNjZXNzKHsgcGFja2FnZU5hbWU6IGVudHJ5Lm5hbWUgfSwgcmVxLnJlbW90ZV91c2VyLCBmdW5jdGlvbiAoZXJyLCBhbGxvd2VkKTogdm9pZCB7XG4gICAgICAgICAgICAgIGlmIChlcnIgfHwgIWFsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBwYWNrYWdlcy5wdXNoKGVudHJ5LnZlcnNpb25zW2VudHJ5W0RJU1RfVEFHU10ubGF0ZXN0XSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaSA+PSByZXN1bHRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIG5leHQocGFja2FnZXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnZXRQYWNrYWdlSW5mbyhpICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmIChyZXN1bHRzLmxlbmd0aCkge1xuICAgICAgZ2V0UGFja2FnZUluZm8oMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHQoW10pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJvdXRlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhZGRTZWFyY2hXZWJBcGk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFJQTs7QUFLQTs7QUFDQTs7OztBQVZBO0FBQ0E7QUFDQTtBQUNBO0FBU0EsU0FBU0EsZUFBVCxDQUF5QkMsT0FBekIsRUFBbURDLElBQW5ELEVBQXdFO0VBQ3RFLE1BQU1DLEtBQUssR0FBRyxzQkFBZDtFQUF3QjtFQUN4Qjs7RUFDQUEsS0FBSyxDQUFDQyxHQUFOLENBQVUsbUJBQVYsRUFBK0IsVUFBVUMsR0FBVixFQUErQkMsR0FBL0IsRUFBcURDLElBQXJELEVBQW1GO0lBQ2hILE1BQU1DLE9BQVksR0FBR0MsZ0JBQU9DLEtBQVAsQ0FBYUwsR0FBRyxDQUFDTSxNQUFKLENBQVdDLFFBQXhCLENBQXJCLENBRGdILENBRWhIOzs7SUFDQSxNQUFNQyxRQUFlLEdBQUcsRUFBeEI7O0lBRUEsTUFBTUMsY0FBYyxHQUFHLFVBQVVDLENBQVYsRUFBbUI7TUFDeENkLE9BQU8sQ0FBQ2UsVUFBUixDQUFtQjtRQUNqQkMsSUFBSSxFQUFFVCxPQUFPLENBQUNPLENBQUQsQ0FBUCxDQUFXRyxHQURBO1FBRWpCQyxXQUFXLEVBQUUsS0FGSTtRQUdqQkMsUUFBUSxFQUFFLENBQUNDLEdBQUQsRUFBTUMsS0FBTixLQUErQjtVQUN2QyxJQUFJLENBQUNELEdBQUQsSUFBUUMsS0FBWixFQUFtQjtZQUNqQnBCLElBQUksQ0FBQ3FCLFlBQUwsQ0FBa0I7Y0FBRUMsV0FBVyxFQUFFRixLQUFLLENBQUNMO1lBQXJCLENBQWxCLEVBQStDWixHQUFHLENBQUNvQixXQUFuRCxFQUFnRSxVQUFVSixHQUFWLEVBQWVLLE9BQWYsRUFBOEI7Y0FDNUYsSUFBSUwsR0FBRyxJQUFJLENBQUNLLE9BQVosRUFBcUI7Z0JBQ25CO2NBQ0Q7O2NBRURiLFFBQVEsQ0FBQ2MsSUFBVCxDQUFjTCxLQUFLLENBQUNNLFFBQU4sQ0FBZU4sS0FBSyxDQUFDTyxvQkFBRCxDQUFMLENBQWlCQyxNQUFoQyxDQUFkO1lBQ0QsQ0FORDtVQU9EOztVQUVELElBQUlmLENBQUMsSUFBSVAsT0FBTyxDQUFDdUIsTUFBUixHQUFpQixDQUExQixFQUE2QjtZQUMzQnhCLElBQUksQ0FBQ00sUUFBRCxDQUFKO1VBQ0QsQ0FGRCxNQUVPO1lBQ0xDLGNBQWMsQ0FBQ0MsQ0FBQyxHQUFHLENBQUwsQ0FBZDtVQUNEO1FBQ0Y7TUFuQmdCLENBQW5CO0lBcUJELENBdEJEOztJQXdCQSxJQUFJUCxPQUFPLENBQUN1QixNQUFaLEVBQW9CO01BQ2xCakIsY0FBYyxDQUFDLENBQUQsQ0FBZDtJQUNELENBRkQsTUFFTztNQUNMUCxJQUFJLENBQUMsRUFBRCxDQUFKO0lBQ0Q7RUFDRixDQWxDRDtFQW9DQSxPQUFPSixLQUFQO0FBQ0Q7O2VBRWNILGUifQ==