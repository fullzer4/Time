"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lunrMutableIndexes = _interopRequireDefault(require("lunr-mutable-indexes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable no-invalid-this

/**
 * Handle the search Indexer.
 */
class Search {
  // @ts-ignore

  /**
   * Constructor.
   */
  constructor() {
    this.index = (0, _lunrMutableIndexes.default)(function () {
      // FIXME: there is no types for this library

      /* eslint no-invalid-this:off */
      // @ts-ignore
      this.field('name', {
        boost: 10
      }); // @ts-ignore

      this.field('description', {
        boost: 4
      }); // @ts-ignore

      this.field('author', {
        boost: 6
      }); // @ts-ignore

      this.field('keywords', {
        boost: 7
      }); // @ts-ignore

      this.field('version'); // @ts-ignore

      this.field('readme');
    });
  }
  /**
   * Performs a query to the indexer.
   * If the keyword is a * it returns all local elements
   * otherwise performs a search
   * @param {*} q the keyword
   * @return {Array} list of results.
   */


  query(query) {
    const localStorage = this.storage.localStorage;
    const hasScope = query.startsWith('@'); // FIXME: lunr-mutable-indexes ignored '@' during indexing

    if (hasScope) {
      query = query.replace('@', '');
    }

    const results = query === '*' ? localStorage.storagePlugin.get(items => {
      items.map(function (pkg) {
        return {
          ref: pkg,
          score: 1
        };
      });
    }) : this.index.search(`*${query}*`);
    return hasScope ? results.filter(({
      ref
    }) => ref.startsWith('@')) : results;
  }
  /**
   * Add a new element to index
   * @param {*} pkg the package
   */


  add(pkg) {
    this.index.add({
      id: pkg.name,
      name: pkg.name,
      description: pkg.description,
      version: `v${pkg.version}`,
      keywords: pkg.keywords,
      author: pkg._npmUser ? pkg._npmUser.name : '???'
    });
  }
  /**
   * Remove an element from the index.
   * @param {*} name the id element
   */


  remove(name) {
    this.index.remove({
      id: name
    });
  }
  /**
   * Force a re-index.
   */


  reindex() {
    this.storage.getLocalDatabase((error, packages) => {
      if (error) {
        // that function shouldn't produce any
        throw error;
      }

      let i = packages.length;

      while (i--) {
        this.add(packages[i]);
      }
    });
  }
  /**
   * Set up the {Storage}
   * @param {*} storage An storage reference.
   */


  configureStorage(storage) {
    this.storage = storage;
    this.reindex();
  }

}

var _default = new Search();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTZWFyY2giLCJjb25zdHJ1Y3RvciIsImluZGV4IiwiZmllbGQiLCJib29zdCIsInF1ZXJ5IiwibG9jYWxTdG9yYWdlIiwic3RvcmFnZSIsImhhc1Njb3BlIiwic3RhcnRzV2l0aCIsInJlcGxhY2UiLCJyZXN1bHRzIiwic3RvcmFnZVBsdWdpbiIsImdldCIsIml0ZW1zIiwibWFwIiwicGtnIiwicmVmIiwic2NvcmUiLCJzZWFyY2giLCJmaWx0ZXIiLCJhZGQiLCJpZCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInZlcnNpb24iLCJrZXl3b3JkcyIsImF1dGhvciIsIl9ucG1Vc2VyIiwicmVtb3ZlIiwicmVpbmRleCIsImdldExvY2FsRGF0YWJhc2UiLCJlcnJvciIsInBhY2thZ2VzIiwiaSIsImxlbmd0aCIsImNvbmZpZ3VyZVN0b3JhZ2UiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbGliL3NlYXJjaC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBlc2xpbnQtZGlzYWJsZSBuby1pbnZhbGlkLXRoaXNcbmltcG9ydCBsdW5yTXV0YWJsZSBmcm9tICdsdW5yLW11dGFibGUtaW5kZXhlcyc7XG5cbmltcG9ydCB7IFZlcnNpb24gfSBmcm9tICdAdmVyZGFjY2lvL3R5cGVzJztcblxuaW1wb3J0IHsgSVN0b3JhZ2UsIElTdG9yYWdlSGFuZGxlciwgSVdlYlNlYXJjaCB9IGZyb20gJy4uLy4uL3R5cGVzJztcblxuLyoqXG4gKiBIYW5kbGUgdGhlIHNlYXJjaCBJbmRleGVyLlxuICovXG5jbGFzcyBTZWFyY2ggaW1wbGVtZW50cyBJV2ViU2VhcmNoIHtcbiAgcHVibGljIGluZGV4OiBsdW5yTXV0YWJsZS5pbmRleDtcbiAgLy8gQHRzLWlnbm9yZVxuICBwdWJsaWMgc3RvcmFnZTogSVN0b3JhZ2VIYW5kbGVyO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3Rvci5cbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmluZGV4ID0gbHVuck11dGFibGUoZnVuY3Rpb24gKCk6IHZvaWQge1xuICAgICAgLy8gRklYTUU6IHRoZXJlIGlzIG5vIHR5cGVzIGZvciB0aGlzIGxpYnJhcnlcbiAgICAgIC8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6b2ZmICovXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLmZpZWxkKCduYW1lJywgeyBib29zdDogMTAgfSk7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLmZpZWxkKCdkZXNjcmlwdGlvbicsIHsgYm9vc3Q6IDQgfSk7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLmZpZWxkKCdhdXRob3InLCB7IGJvb3N0OiA2IH0pO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5maWVsZCgna2V5d29yZHMnLCB7IGJvb3N0OiA3IH0pO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5maWVsZCgndmVyc2lvbicpO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdGhpcy5maWVsZCgncmVhZG1lJyk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBxdWVyeSB0byB0aGUgaW5kZXhlci5cbiAgICogSWYgdGhlIGtleXdvcmQgaXMgYSAqIGl0IHJldHVybnMgYWxsIGxvY2FsIGVsZW1lbnRzXG4gICAqIG90aGVyd2lzZSBwZXJmb3JtcyBhIHNlYXJjaFxuICAgKiBAcGFyYW0geyp9IHEgdGhlIGtleXdvcmRcbiAgICogQHJldHVybiB7QXJyYXl9IGxpc3Qgb2YgcmVzdWx0cy5cbiAgICovXG4gIHB1YmxpYyBxdWVyeShxdWVyeTogc3RyaW5nKTogYW55W10ge1xuICAgIGNvbnN0IGxvY2FsU3RvcmFnZSA9IHRoaXMuc3RvcmFnZS5sb2NhbFN0b3JhZ2UgYXMgSVN0b3JhZ2U7XG5cbiAgICBjb25zdCBoYXNTY29wZSA9IHF1ZXJ5LnN0YXJ0c1dpdGgoJ0AnKTtcbiAgICAvLyBGSVhNRTogbHVuci1tdXRhYmxlLWluZGV4ZXMgaWdub3JlZCAnQCcgZHVyaW5nIGluZGV4aW5nXG4gICAgaWYgKGhhc1Njb3BlKSB7XG4gICAgICBxdWVyeSA9IHF1ZXJ5LnJlcGxhY2UoJ0AnLCAnJyk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0cyA9XG4gICAgICBxdWVyeSA9PT0gJyonXG4gICAgICAgID8gbG9jYWxTdG9yYWdlLnN0b3JhZ2VQbHVnaW4uZ2V0KChpdGVtcyk6IGFueSA9PiB7XG4gICAgICAgICAgICBpdGVtcy5tYXAoZnVuY3Rpb24gKHBrZyk6IGFueSB7XG4gICAgICAgICAgICAgIHJldHVybiB7IHJlZjogcGtnLCBzY29yZTogMSB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgOiB0aGlzLmluZGV4LnNlYXJjaChgKiR7cXVlcnl9KmApO1xuXG4gICAgcmV0dXJuIGhhc1Njb3BlID8gcmVzdWx0cy5maWx0ZXIoKHsgcmVmIH0pID0+IHJlZi5zdGFydHNXaXRoKCdAJykpIDogcmVzdWx0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgZWxlbWVudCB0byBpbmRleFxuICAgKiBAcGFyYW0geyp9IHBrZyB0aGUgcGFja2FnZVxuICAgKi9cbiAgcHVibGljIGFkZChwa2c6IFZlcnNpb24pOiB2b2lkIHtcbiAgICB0aGlzLmluZGV4LmFkZCh7XG4gICAgICBpZDogcGtnLm5hbWUsXG4gICAgICBuYW1lOiBwa2cubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBwa2cuZGVzY3JpcHRpb24sXG4gICAgICB2ZXJzaW9uOiBgdiR7cGtnLnZlcnNpb259YCxcbiAgICAgIGtleXdvcmRzOiBwa2cua2V5d29yZHMsXG4gICAgICBhdXRob3I6IHBrZy5fbnBtVXNlciA/IHBrZy5fbnBtVXNlci5uYW1lIDogJz8/PycsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGVsZW1lbnQgZnJvbSB0aGUgaW5kZXguXG4gICAqIEBwYXJhbSB7Kn0gbmFtZSB0aGUgaWQgZWxlbWVudFxuICAgKi9cbiAgcHVibGljIHJlbW92ZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmluZGV4LnJlbW92ZSh7IGlkOiBuYW1lIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcmNlIGEgcmUtaW5kZXguXG4gICAqL1xuICBwdWJsaWMgcmVpbmRleCgpOiB2b2lkIHtcbiAgICB0aGlzLnN0b3JhZ2UuZ2V0TG9jYWxEYXRhYmFzZSgoZXJyb3IsIHBhY2thZ2VzKTogdm9pZCA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgLy8gdGhhdCBmdW5jdGlvbiBzaG91bGRuJ3QgcHJvZHVjZSBhbnlcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICBsZXQgaSA9IHBhY2thZ2VzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdGhpcy5hZGQocGFja2FnZXNbaV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB1cCB0aGUge1N0b3JhZ2V9XG4gICAqIEBwYXJhbSB7Kn0gc3RvcmFnZSBBbiBzdG9yYWdlIHJlZmVyZW5jZS5cbiAgICovXG4gIHB1YmxpYyBjb25maWd1cmVTdG9yYWdlKHN0b3JhZ2U6IElTdG9yYWdlSGFuZGxlcik6IHZvaWQge1xuICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XG4gICAgdGhpcy5yZWluZGV4KCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IFNlYXJjaCgpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7Ozs7QUFEQTs7QUFPQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxNQUFOLENBQW1DO0VBRWpDOztFQUdBO0FBQ0Y7QUFDQTtFQUNTQyxXQUFXLEdBQUc7SUFDbkIsS0FBS0MsS0FBTCxHQUFhLGlDQUFZLFlBQWtCO01BQ3pDOztNQUNBO01BQ0E7TUFDQSxLQUFLQyxLQUFMLENBQVcsTUFBWCxFQUFtQjtRQUFFQyxLQUFLLEVBQUU7TUFBVCxDQUFuQixFQUp5QyxDQUt6Qzs7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