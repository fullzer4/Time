{"version":3,"sources":["../src/utils.ts"],"names":["lockAndRead","name","cb","lock","err","res","parseHTPasswd","input","split","reduce","result","line","args","map","str","trim","length","verifyPassword","passwd","hash","match","Promise","resolve","reject","bcrypt","compare","error","indexOf","substr","crypto","createHash","update","digest","addUserToHTPasswd","body","user","encodeURIComponent","status","crypt3","comment","Date","toJSON","newline","sanityCheck","password","verifyFn","users","maxUsers","Error","auth","Object","keys","getCryptoPassword","changePasswordToHTPasswd","newPasswd","lines","username","_passwd","_newPasswd","replace","join"],"mappings":"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","sourcesContent":["import crypto from 'crypto';\n\nimport md5 from 'apache-md5';\nimport bcrypt from 'bcryptjs';\nimport createError, { HttpError } from 'http-errors';\nimport { readFile } from '@verdaccio/file-locking';\nimport { Callback } from '@verdaccio/types';\n\nimport crypt3 from './crypt3';\n\n// this function neither unlocks file nor closes it\n// it'll have to be done manually later\nexport function lockAndRead(name: string, cb: Callback): void {\n  readFile(name, { lock: true }, (err, res) => {\n    if (err) {\n      return cb(err);\n    }\n\n    return cb(null, res);\n  });\n}\n\n/**\n * parseHTPasswd - convert htpasswd lines to object.\n * @param {string} input\n * @returns {object}\n */\nexport function parseHTPasswd(input: string): Record<string, any> {\n  // The input is split on line ending styles that are both windows and unix compatible\n  return input.split(/[\\r]?[\\n]/).reduce((result, line) => {\n    const args = line.split(':', 3).map((str) => str.trim());\n    if (args.length > 1) {\n      result[args[0]] = args[1];\n    }\n    return result;\n  }, {});\n}\n\n/**\n * verifyPassword - matches password and it's hash.\n * @param {string} passwd\n * @param {string} hash\n * @returns {Promise<boolean>}\n */\nexport async function verifyPassword(passwd: string, hash: string): Promise<boolean> {\n  if (hash.match(/^\\$2([aby])\\$/)) {\n    return new Promise((resolve, reject) =>\n      bcrypt.compare(passwd, hash, (error, result) => (error ? reject(error) : resolve(result)))\n    );\n  } else if (hash.indexOf('{PLAIN}') === 0) {\n    return passwd === hash.substr(7);\n  } else if (hash.indexOf('{SHA}') === 0) {\n    return (\n      crypto\n        .createHash('sha1')\n        // https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding\n        .update(passwd, 'utf8')\n        .digest('base64') === hash.substr(5)\n    );\n  }\n  // for backwards compatibility, first check md5 then check crypt3\n  return md5(passwd, hash) === hash || crypt3(passwd, hash) === hash;\n}\n\n/**\n * addUserToHTPasswd - Generate a htpasswd format for .htpasswd\n * @param {string} body\n * @param {string} user\n * @param {string} passwd\n * @returns {string}\n */\nexport function addUserToHTPasswd(body: string, user: string, passwd: string): string {\n  if (user !== encodeURIComponent(user)) {\n    const err = createError('username should not contain non-uri-safe characters');\n\n    err.status = 409;\n    throw err;\n  }\n\n  if (crypt3) {\n    passwd = crypt3(passwd);\n  } else {\n    passwd = '{SHA}' + crypto.createHash('sha1').update(passwd, 'utf8').digest('base64');\n  }\n  const comment = 'autocreated ' + new Date().toJSON();\n  let newline = `${user}:${passwd}:${comment}\\n`;\n\n  if (body.length && body[body.length - 1] !== '\\n') {\n    newline = '\\n' + newline;\n  }\n  return body + newline;\n}\n\n/**\n * Sanity check for a user\n * @param {string} user\n * @param {object} users\n * @param {string} password\n * @param {Callback} verifyFn\n * @param {number} maxUsers\n * @returns {object}\n */\nexport async function sanityCheck(\n  user: string,\n  password: string,\n  verifyFn: Callback,\n  users: {},\n  maxUsers: number\n): Promise<HttpError | null> {\n  let err;\n\n  // check for user or password\n  if (!user || !password) {\n    err = Error('username and password is required');\n    err.status = 400;\n    return err;\n  }\n\n  const hash = users[user];\n\n  if (maxUsers < 0) {\n    err = Error('user registration disabled');\n    err.status = 409;\n    return err;\n  }\n\n  if (hash) {\n    const auth = await verifyFn(password, users[user]);\n    if (auth) {\n      err = Error('username is already registered');\n      err.status = 409;\n      return err;\n    }\n    err = Error('unauthorized access');\n    err.status = 401;\n    return err;\n  } else if (Object.keys(users).length >= maxUsers) {\n    err = Error('maximum amount of users reached');\n    err.status = 403;\n    return err;\n  }\n\n  return null;\n}\n\nexport function getCryptoPassword(password: string): string {\n  return `{SHA}${crypto.createHash('sha1').update(password, 'utf8').digest('base64')}`;\n}\n\n/**\n * changePasswordToHTPasswd - change password for existing user\n * @param {string} body\n * @param {string} user\n * @param {string} passwd\n * @param {string} newPasswd\n * @returns {string}\n */\nexport function changePasswordToHTPasswd(\n  body: string,\n  user: string,\n  passwd: string,\n  newPasswd: string\n): string {\n  let lines = body.split('\\n');\n  lines = lines.map((line) => {\n    const [username, password] = line.split(':', 3);\n\n    if (username === user) {\n      let _passwd;\n      let _newPasswd;\n      if (crypt3) {\n        _passwd = crypt3(passwd, password);\n        _newPasswd = crypt3(newPasswd);\n      } else {\n        _passwd = getCryptoPassword(passwd);\n        _newPasswd = getCryptoPassword(newPasswd);\n      }\n\n      if (password == _passwd) {\n        // replace old password hash with new password hash\n        line = line.replace(_passwd, _newPasswd);\n      } else {\n        throw new Error('Invalid old Password');\n      }\n    }\n    return line;\n  });\n\n  return lines.join('\\n');\n}\n"],"file":"utils.js"}