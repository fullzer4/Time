{"version":3,"sources":["../src/htpasswd.ts"],"names":["DEFAULT_SLOW_VERIFY_MS","HTPasswd","constructor","config","stuff","users","logger","verdaccioConfig","maxUsers","max_users","Infinity","lastTime","file","Error","path","Path","resolve","dirname","self_path","slowVerifyMs","slow_verify_ms","authenticate","user","password","cb","reload","err","code","passwordValid","start","Date","durationMs","getTime","warn","message","error","adduser","realCb","pathPass","sanity","verifyPassword","res","locked","body","toString","_writeFile","callback","fs","stat","stats","mtime","readFile","buffer","Object","assign","_stringToUt8","authentication","writeFile","changePassword","newPassword","pathPassFile"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport Path from 'path';\n\nimport { Callback, AuthConf, Config, Logger, IPluginAuth } from '@verdaccio/types';\nimport { unlockFile } from '@verdaccio/file-locking';\n\nimport {\n  verifyPassword,\n  lockAndRead,\n  parseHTPasswd,\n  addUserToHTPasswd,\n  changePasswordToHTPasswd,\n  sanityCheck,\n} from './utils';\n\nexport interface VerdaccioConfigApp extends Config {\n  file: string;\n  slow_verify_ms?: number;\n}\n\nexport const DEFAULT_SLOW_VERIFY_MS = 200;\n\n/**\n * HTPasswd - Verdaccio auth class\n */\nexport default class HTPasswd implements IPluginAuth<VerdaccioConfigApp> {\n  /**\n   *\n   * @param {*} config htpasswd file\n   * @param {object} stuff config.yaml in object from\n   */\n  private users: {};\n  private stuff: {};\n  private config: {};\n  private verdaccioConfig: Config;\n  private maxUsers: number;\n  private path: string;\n  private slowVerifyMs: number;\n  private logger: Logger;\n  private lastTime: any;\n  // constructor\n  public constructor(config: AuthConf, stuff: VerdaccioConfigApp) {\n    this.users = {};\n\n    // config for this module\n    this.config = config;\n    this.stuff = stuff;\n\n    // verdaccio logger\n    this.logger = stuff.logger;\n\n    // verdaccio main config object\n    this.verdaccioConfig = stuff.config;\n\n    // all this \"verdaccio_config\" stuff is for b/w compatibility only\n    this.maxUsers = config.max_users ? config.max_users : Infinity;\n\n    this.lastTime = null;\n\n    const { file } = config;\n\n    if (!file) {\n      throw new Error('should specify \"file\" in config');\n    }\n\n    this.path = Path.resolve(Path.dirname(this.verdaccioConfig.self_path), file);\n    this.slowVerifyMs = config.slow_verify_ms || DEFAULT_SLOW_VERIFY_MS;\n  }\n\n  /**\n   * authenticate - Authenticate user.\n   * @param {string} user\n   * @param {string} password\n   * @param {function} cb\n   * @returns {function}\n   */\n  public authenticate(user: string, password: string, cb: Callback): void {\n    this.reload(async (err) => {\n      if (err) {\n        return cb(err.code === 'ENOENT' ? null : err);\n      }\n      if (!this.users[user]) {\n        return cb(null, false);\n      }\n\n      let passwordValid = false;\n      try {\n        const start = new Date();\n        passwordValid = await verifyPassword(password, this.users[user]);\n        const durationMs = new Date().getTime() - start.getTime();\n        if (durationMs > this.slowVerifyMs) {\n          this.logger.warn(\n            { user, durationMs },\n            'Password for user \"@{user}\" took @{durationMs}ms to verify'\n          );\n        }\n      } catch ({ message }) {\n        this.logger.error({ message }, 'Unable to verify user password: @{message}');\n      }\n      if (!passwordValid) {\n        return cb(null, false);\n      }\n\n      // authentication succeeded!\n      // return all usergroups this user has access to;\n      // (this particular package has no concept of usergroups, so just return\n      // user herself)\n      return cb(null, [user]);\n    });\n  }\n\n  /**\n   * Add user\n   * 1. lock file for writing (other processes can still read)\n   * 2. reload .htpasswd\n   * 3. write new data into .htpasswd.tmp\n   * 4. move .htpasswd.tmp to .htpasswd\n   * 5. reload .htpasswd\n   * 6. unlock file\n   *\n   * @param {string} user\n   * @param {string} password\n   * @param {function} realCb\n   * @returns {Promise<any>}\n   */\n  public async adduser(user: string, password: string, realCb: Callback): Promise<any> {\n    const pathPass = this.path;\n    let sanity = await sanityCheck(user, password, verifyPassword, this.users, this.maxUsers);\n\n    // preliminary checks, just to ensure that file won't be reloaded if it's\n    // not needed\n    if (sanity) {\n      return realCb(sanity, false);\n    }\n\n    lockAndRead(pathPass, async (err, res): Promise<void> => {\n      let locked = false;\n\n      // callback that cleans up lock first\n      const cb = (err): void => {\n        if (locked) {\n          unlockFile(pathPass, () => {\n            // ignore any error from the unlock\n            realCb(err, !err);\n          });\n        } else {\n          realCb(err, !err);\n        }\n      };\n\n      if (!err) {\n        locked = true;\n      }\n\n      // ignore ENOENT errors, we'll just create .htpasswd in that case\n      if (err && err.code !== 'ENOENT') {\n        return cb(err);\n      }\n      const body = (res || '').toString('utf8');\n      this.users = parseHTPasswd(body);\n\n      // real checks, to prevent race conditions\n      // parsing users after reading file.\n      sanity = await sanityCheck(user, password, verifyPassword, this.users, this.maxUsers);\n\n      if (sanity) {\n        return cb(sanity);\n      }\n\n      try {\n        this._writeFile(addUserToHTPasswd(body, user, password), cb);\n      } catch (err) {\n        return cb(err);\n      }\n    });\n  }\n\n  /**\n   * Reload users\n   * @param {function} callback\n   */\n  public reload(callback: Callback): void {\n    fs.stat(this.path, (err, stats) => {\n      if (err) {\n        return callback(err);\n      }\n      if (this.lastTime === stats.mtime) {\n        return callback();\n      }\n\n      this.lastTime = stats.mtime;\n\n      fs.readFile(this.path, 'utf8', (err, buffer) => {\n        if (err) {\n          return callback(err);\n        }\n\n        Object.assign(this.users, parseHTPasswd(buffer));\n        callback();\n      });\n    });\n  }\n\n  private _stringToUt8(authentication: string): string {\n    return (authentication || '').toString();\n  }\n\n  private _writeFile(body: string, cb: Callback): void {\n    fs.writeFile(this.path, body, (err) => {\n      if (err) {\n        cb(err);\n      } else {\n        this.reload(() => {\n          cb(null);\n        });\n      }\n    });\n  }\n\n  /**\n   * changePassword - change password for existing user.\n   * @param {string} user\n   * @param {string} password\n   * @param {string} newPassword\n   * @param {function} realCb\n   * @returns {function}\n   */\n  public changePassword(\n    user: string,\n    password: string,\n    newPassword: string,\n    realCb: Callback\n  ): void {\n    lockAndRead(this.path, (err, res) => {\n      let locked = false;\n      const pathPassFile = this.path;\n\n      // callback that cleans up lock first\n      const cb = (err): void => {\n        if (locked) {\n          unlockFile(pathPassFile, () => {\n            // ignore any error from the unlock\n            realCb(err, !err);\n          });\n        } else {\n          realCb(err, !err);\n        }\n      };\n\n      if (!err) {\n        locked = true;\n      }\n\n      if (err && err.code !== 'ENOENT') {\n        return cb(err);\n      }\n\n      const body = this._stringToUt8(res);\n      this.users = parseHTPasswd(body);\n\n      if (!this.users[user]) {\n        return cb(new Error('User not found'));\n      }\n\n      try {\n        this._writeFile(changePasswordToHTPasswd(body, user, password, newPassword), cb);\n      } catch (err) {\n        return cb(err);\n      }\n    });\n  }\n}\n"],"file":"htpasswd.js"}