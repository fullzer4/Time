"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeMarkCliSessionInactive = exports.executeMarkCliSessionActiveHeartbeat = exports.fetchEnabledServices = exports.ensureAppForSite = exports.createNewAppSchema = exports.upsertAppForSite = exports.fetchAppSchema = exports.friendlyEventName = exports.createPersistedQuery = exports.ackCLISessionEvents = exports.updateCLISessionMetadata = exports.createCLISession = exports.fetchCliSessionEvents = exports.fetchCliSession = exports.fetchPersistedQuery = exports.fetchOneGraphSchema = exports.fetchOneGraphSchemaJson = void 0;
var graphql_1 = require("graphql");
var fetch = require("node-fetch");
var internalConsole_1 = require("./internalConsole");
var generatedOneGraphClient_1 = require("./generatedOneGraphClient");
var ONEDASH_APP_ID = "0b066ba6-ed39-4db8-a497-ba0be34d5b2a";
/**
 * Given an appId and desired services, fetch the schema (in json form) for that app
 * @param {string} appId
 * @param {string[]} enabledServices
 * @returns {Promise<object>} The schema for the app
 */
var fetchOneGraphSchemaJson = function (appId, enabledServices) { return __awaiter(void 0, void 0, void 0, function () {
    var url, headers, response, text, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                url = "https://serve.onegraph.com/schema?app_id=" + appId + "&services=" + enabledServices.join(",");
                headers = {};
                _a.label = 1;
            case 1:
                _a.trys.push([1, 4, , 5]);
                return [4 /*yield*/, fetch(url, {
                        method: "GET",
                        headers: headers,
                        body: null,
                    })];
            case 2:
                response = _a.sent();
                return [4 /*yield*/, response.text()];
            case 3:
                text = _a.sent();
                return [2 /*return*/, JSON.parse(text)];
            case 4:
                error_1 = _a.sent();
                internalConsole_1.internalConsole.error("Error fetching schema: " + JSON.stringify(error_1, null, 2));
                return [3 /*break*/, 5];
            case 5: return [2 /*return*/];
        }
    });
}); };
exports.fetchOneGraphSchemaJson = fetchOneGraphSchemaJson;
/**
 * Given an appId and desired services, fetch the schema json for an app and parse it into a GraphQL Schema
 * @param {string} appId
 * @param {string[]} enabledServices
 * @returns {Promise<GraphQLSchema>} The schema for the app
 */
var fetchOneGraphSchema = function (appId, enabledServices) { return __awaiter(void 0, void 0, void 0, function () {
    var result, schema;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.fetchOneGraphSchemaJson)(appId, enabledServices)];
            case 1:
                result = _a.sent();
                schema = (0, graphql_1.buildClientSchema)(result.data);
                return [2 /*return*/, schema];
        }
    });
}); };
exports.fetchOneGraphSchema = fetchOneGraphSchema;
/**
 * Fetch a persisted doc belonging to appId by its id
 * @param {string} authToken
 * @param {string} appId
 * @param {string} docId
 * @returns {string|undefined} The persisted operations doc
 */
var fetchPersistedQuery = function (authToken, appId, docId) { return __awaiter(void 0, void 0, void 0, function () {
    var response, persistedQuery;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.fetchPersistedQueryQuery({
                    nfToken: authToken,
                    appId: appId,
                    id: docId,
                }, {
                    siteId: ONEDASH_APP_ID,
                })];
            case 1:
                response = _c.sent();
                persistedQuery = (_b = (_a = response.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.persistedQuery;
                return [2 /*return*/, persistedQuery];
        }
    });
}); };
exports.fetchPersistedQuery = fetchPersistedQuery;
/**
 *
 * @param {object} options
 * @param {string} options.appId The app to query against, typically the siteId
 * @param {string} options.authToken The (typically netlify) access token that is used for authentication
 * @param {string} options.sessionId The session id to fetch CLI events for
 * @returns {Promise<{session: OneGraphCliSession , errors: any[]}>} The unhandled events for the cli session to process
 */
var fetchCliSession = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var appId, authToken, sessionId, desiredEventCount, sessionResult, session;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                appId = options.appId, authToken = options.authToken, sessionId = options.sessionId;
                desiredEventCount = options.desiredEventCount || 1;
                return [4 /*yield*/, generatedOneGraphClient_1.default.fetchCLISessionQuery({
                        nfToken: authToken,
                        sessionId: sessionId,
                        first: desiredEventCount || 1000,
                    }, {
                        siteId: appId,
                    })];
            case 1:
                sessionResult = _c.sent();
                session = ((_b = (_a = sessionResult.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.netlifyCliSession) || [];
                return [2 /*return*/, { session: session, errors: sessionResult.errors }];
        }
    });
}); };
exports.fetchCliSession = fetchCliSession;
/**
 *
 * @param {object} options
 * @param {string} options.appId The app to query against, typically the siteId
 * @param {string} options.authToken The (typically netlify) access token that is used for authentication
 * @param {string} options.sessionId The session id to fetch CLI events for
 * @returns {Promise<OneGraphCliEvent[]|undefined>} The unhandled events for the cli session to process
 */
var fetchCliSessionEvents = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var appId, authToken, sessionId, desiredEventCount, next, events;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                appId = options.appId, authToken = options.authToken, sessionId = options.sessionId;
                desiredEventCount = 1000;
                return [4 /*yield*/, (0, exports.fetchCliSession)({
                        appId: appId,
                        authToken: authToken,
                        sessionId: sessionId,
                        desiredEventCount: desiredEventCount,
                    })];
            case 1:
                next = _b.sent();
                events = ((_a = next.session) === null || _a === void 0 ? void 0 : _a.events) || [];
                return [2 /*return*/, { errors: next.errors, events: events }];
        }
    });
}); };
exports.fetchCliSessionEvents = fetchCliSessionEvents;
/**
 * Register a new CLI session with OneGraph
 * @param {string} netlifyToken The netlify token to use for authentication
 * @param {string} appId The app to query against, typically the siteId
 * @param {string} name The name of the CLI session, will be visible in the UI and CLI ouputs
 * @param {object} metadata Any additional metadata to attach to the session
 * @returns {Promise<object|undefined>} The CLI session object
 */
var createCLISession = function (netlifyToken, appId, name, metadata) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, result, session;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                payload = {
                    nfToken: netlifyToken,
                    appId: appId,
                    name: name,
                    metadata: metadata,
                };
                return [4 /*yield*/, generatedOneGraphClient_1.default.executeCreateCLISessionMutation(payload, {
                        siteId: appId,
                    })];
            case 1:
                result = _d.sent();
                session = (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.createNetlifyCliSession) === null || _c === void 0 ? void 0 : _c.session;
                return [2 /*return*/, session];
        }
    });
}); };
exports.createCLISession = createCLISession;
/**
 * Update the CLI session with new metadata (e.g. the latest docId) by its id
 * @param {string} netlifyToken The netlify token to use for authentication
 * @param {string} appId The app to query against, typically the siteId
 * @param {string} sessionId The session id to update
 * @param {object} metadata The new metadata to set on the session
 * @returns {Promise<object|undefined>} The updated session object
 */
var updateCLISessionMetadata = function (netlifyToken, appId, sessionId, metadata) { return __awaiter(void 0, void 0, void 0, function () {
    var result, session;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeUpdateCLISessionMetadataMutation({
                    nfToken: netlifyToken,
                    sessionId: sessionId,
                    metadata: metadata,
                }, {
                    siteId: appId,
                })];
            case 1:
                result = _d.sent();
                session = (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.updateNetlifyCliSession) === null || _c === void 0 ? void 0 : _c.session;
                return [2 /*return*/, session];
        }
    });
}); };
exports.updateCLISessionMetadata = updateCLISessionMetadata;
/**
 * Acknoledge CLI events that have been processed and delete them from the upstream queue
 * @param {object} input
 * @param {string} input.appId The app to query against, typically the siteId
 * @param {string} input.authToken The (typically netlify) access token that is used for authentication, if any
 * @param {string} input.sessionId The session id the events belong to
 * @param {string[]} input.eventIds The event ids to ack (and delete) from the session queue, having been processed
 * @returns
 */
var ackCLISessionEvents = function (input) { return __awaiter(void 0, void 0, void 0, function () {
    var appId, authToken, eventIds, sessionId, result, events;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                appId = input.appId, authToken = input.authToken, eventIds = input.eventIds, sessionId = input.sessionId;
                return [4 /*yield*/, generatedOneGraphClient_1.default.executeAckCLISessionEventMutation({
                        nfToken: authToken,
                        sessionId: sessionId,
                        eventIds: eventIds,
                    }, {
                        siteId: appId,
                    })];
            case 1:
                result = _c.sent();
                events = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.ackNetlifyCliEvents;
                return [2 /*return*/, events];
        }
    });
}); };
exports.ackCLISessionEvents = ackCLISessionEvents;
/**
 * Create a persisted operations doc to be later retrieved, usually from a GUI
 * @param {string} netlifyToken The netlify token to use for authentication
 * @param {object} input
 * @param {string} input.appId The app to query against, typically the siteId
 * @param {string} input.document The GraphQL operations document to persist
 * @param {string} input.description A description of the operations doc
 * @param {string[]} input.tags A list of tags to attach to the operations doc
 * @returns
 */
var createPersistedQuery = function (netlifyToken, _a) {
    var appId = _a.appId, description = _a.description, document = _a.document, tags = _a.tags;
    return __awaiter(void 0, void 0, void 0, function () {
        var result, persistedQuery;
        var _b, _c, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeCreatePersistedQueryMutation({
                        nfToken: netlifyToken,
                        appId: appId,
                        query: document,
                        tags: tags,
                        description: description,
                    }, {
                        siteId: appId,
                    })];
                case 1:
                    result = _e.sent();
                    persistedQuery = (_d = (_c = (_b = result.data) === null || _b === void 0 ? void 0 : _b.oneGraph) === null || _c === void 0 ? void 0 : _c.createPersistedQuery) === null || _d === void 0 ? void 0 : _d.persistedQuery;
                    return [2 /*return*/, persistedQuery];
            }
        });
    });
};
exports.createPersistedQuery = createPersistedQuery;
/**
 *
 * @param {OneGraphCliEvent} event
 * @returns {string} a human-friendly description of the event
 */
var friendlyEventName = function (event) {
    var __typename = event.__typename, payload = event.payload;
    switch (__typename) {
        case "OneGraphNetlifyCliSessionTestEvent":
            return (0, exports.friendlyEventName)(payload);
        case "OneGraphNetlifyCliSessionGenerateHandlerEvent":
            return "Generate handler as Netlify function ";
        case "OneGraphNetlifyCliSessionPersistedLibraryUpdatedEvent":
            return "Sync Netlify Graph operations library";
        default: {
            return "Unrecognized event (" + __typename + ")";
        }
    }
};
exports.friendlyEventName = friendlyEventName;
/**
 * Fetch the schema metadata for a site (enabled services, id, etc.)
 * @param {string} authToken The (typically netlify) access token that is used for authentication, if any
 * @param {string} siteId The site id to query against
 * @returns {Promise<object|undefined>} The schema metadata for the site
 */
var fetchAppSchema = function (authToken, siteId) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.fetchAppSchemaQuery({
                    nfToken: authToken,
                    appId: siteId,
                }, {
                    siteId: siteId,
                })];
            case 1:
                result = _d.sent();
                return [2 /*return*/, (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.app) === null || _c === void 0 ? void 0 : _c.graphQLSchema];
        }
    });
}); };
exports.fetchAppSchema = fetchAppSchema;
/**
 * If a site does not exists upstream in OneGraph for the given site, create it
 * @param {string} authToken The (typically netlify) access token that is used for authentication, if any
 * @param {string} siteId The site id to create an app for upstream on OneGraph
 * @returns
 */
var upsertAppForSite = function (authToken, siteId) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeUpsertAppForSiteMutation({
                    nfToken: authToken,
                    siteId: siteId,
                }, {
                    siteId: ONEDASH_APP_ID,
                })];
            case 1:
                result = _d.sent();
                return [2 /*return*/, (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.upsertAppForNetlifySite) === null || _c === void 0 ? void 0 : _c.app];
        }
    });
}); };
exports.upsertAppForSite = upsertAppForSite;
/**
 * Create a new schema in OneGraph for the given site with the specified metadata (enabled services, etc.)
 * @param {string} input.netlifyToken The (typically netlify) access token that is used for authentication, if any
 * @param {object} input The details of the schema to create
 * @returns {Promise<object>} The schema metadata for the site
 */
var createNewAppSchema = function (nfToken, input) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeCreateNewSchemaMutation({
                    nfToken: nfToken,
                    input: input,
                }, {
                    siteId: input.appId,
                })];
            case 1:
                result = _d.sent();
                return [2 /*return*/, (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.createGraphQLSchema) === null || _c === void 0 ? void 0 : _c.graphqlSchema];
        }
    });
}); };
exports.createNewAppSchema = createNewAppSchema;
/**
 * Ensure that an app exists upstream in OneGraph for the given site
 * @param {string} authToken The (typically netlify) access token that is used for authentication, if any
 * @param {string} siteId The site id to create an app for upstream on OneGraph
 * @returns
 */
var ensureAppForSite = function (authToken, siteId) { return __awaiter(void 0, void 0, void 0, function () {
    var upsertResult, appId, schema;
    var _a, _b, _c, _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeUpsertAppForSiteMutation({
                    nfToken: authToken,
                    siteId: siteId,
                }, {
                    siteId: ONEDASH_APP_ID,
                })];
            case 1:
                upsertResult = _e.sent();
                appId = (_d = (_c = (_b = (_a = upsertResult.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.upsertAppForNetlifySite) === null || _c === void 0 ? void 0 : _c.app) === null || _d === void 0 ? void 0 : _d.id;
                return [4 /*yield*/, generatedOneGraphClient_1.default.fetchAppSchemaQuery({
                        nfToken: authToken,
                        appId: appId,
                    }, {
                        siteId: appId,
                    })];
            case 2:
                schema = _e.sent();
                if (!!schema) return [3 /*break*/, 4];
                internalConsole_1.internalConsole.log("Creating new empty default GraphQL schema for site....");
                return [4 /*yield*/, generatedOneGraphClient_1.default.executeCreateNewSchemaMutation({
                        nfToken: authToken,
                        input: {
                            appId: siteId,
                            enabledServices: ["ONEGRAPH"],
                            setAsDefaultForApp: true,
                        },
                    }, {
                        siteId: appId,
                    })];
            case 3:
                _e.sent();
                _e.label = 4;
            case 4: return [2 /*return*/];
        }
    });
}); };
exports.ensureAppForSite = ensureAppForSite;
/**
 * Fetch a list of what services are enabled for the given site
 * @param {string} authToken The (typically netlify) access token that is used for authentication, if any
 * @param {string} appId The app id to query against
 * @returns
 */
var fetchEnabledServices = function (authToken, appId) { return __awaiter(void 0, void 0, void 0, function () {
    var appSchemaResult;
    var _a, _b, _c, _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.fetchAppSchemaQuery({
                    nfToken: authToken,
                    appId: appId,
                }, {
                    siteId: appId,
                })];
            case 1:
                appSchemaResult = _e.sent();
                return [2 /*return*/, (_d = (_c = (_b = (_a = appSchemaResult.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.app) === null || _c === void 0 ? void 0 : _c.graphQLSchema) === null || _d === void 0 ? void 0 : _d.services];
        }
    });
}); };
exports.fetchEnabledServices = fetchEnabledServices;
/**
 * Mark a CLI session as active and update the session's heartbeat
 * @param {string} authToken The (typically netlify) access token that is used for authentication
 * @param {string} appId The app to query against, typically the siteId
 * @param {string} sessionId The session id to mark as active / update heartbeat
 * @returns {errors: any[], data: MiniSession}
 */
var executeMarkCliSessionActiveHeartbeat = function (authToken, appId, sessionId) { return __awaiter(void 0, void 0, void 0, function () {
    var result, session;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeMarkCLISessionActiveHeartbeat({
                    nfToken: authToken,
                    id: sessionId,
                }, {
                    siteId: appId,
                })];
            case 1:
                result = _d.sent();
                session = (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.updateNetlifyCliSession) === null || _c === void 0 ? void 0 : _c.session;
                return [2 /*return*/, { errors: result.errors, data: session }];
        }
    });
}); };
exports.executeMarkCliSessionActiveHeartbeat = executeMarkCliSessionActiveHeartbeat;
/**
 * Mark a CLI session as inactive
 * @param {string} authToken The (typically netlify) access token that is used for authentication
 * @param {string} appId The app to query against, typically the siteId
 * @param {string} sessionId The session id to mark as inactive
 * @returns {errors: any[], data: MiniSession}
 */
var executeMarkCliSessionInactive = function (authToken, appId, sessionId) { return __awaiter(void 0, void 0, void 0, function () {
    var result, session;
    var _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0: return [4 /*yield*/, generatedOneGraphClient_1.default.executeMarkCLISessionInactive({
                    nfToken: authToken,
                    id: sessionId,
                }, {
                    siteId: appId,
                })];
            case 1:
                result = _d.sent();
                session = (_c = (_b = (_a = result.data) === null || _a === void 0 ? void 0 : _a.oneGraph) === null || _b === void 0 ? void 0 : _b.updateNetlifyCliSession) === null || _c === void 0 ? void 0 : _c.session;
                return [2 /*return*/, { errors: result.errors, data: session }];
        }
    });
}); };
exports.executeMarkCliSessionInactive = executeMarkCliSessionInactive;
//# sourceMappingURL=oneGraphClient.js.map