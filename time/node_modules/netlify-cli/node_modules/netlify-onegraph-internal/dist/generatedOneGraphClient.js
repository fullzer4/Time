"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeMarkCLISessionInactive = exports.executeMarkCLISessionActiveHeartbeat = exports.executeCreateNewSchemaMutation = exports.executeUpsertAppForSiteMutation = exports.fetchAppSchemaQuery = exports.executeAckCLISessionEventMutation = exports.fetchCLISessionQuery = exports.executeCreateCLISessionEventMutation = exports.executeUpdateCLISessionMetadataMutation = exports.executeCreateCLISessionMutation = exports.fetchPersistedQueryQuery = exports.fetchPersistedQueriesQuery = exports.fetchListPersistedQueries = exports.executeCreatePersistedQueryMutation = void 0;
// GENERATED VIA NETLIFY AUTOMATED DEV TOOLS, EDIT WITH CAUTION!
var fetch = require('node-fetch');
var internalConsole = require("./internalConsole").internalConsole;
var operationsDoc = "mutation CreatePersistedQueryMutation(\n  $nfToken: String!\n  $appId: String!\n  $query: String!\n  $tags: [String!]!\n  $description: String!\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155001\n  \"\"\"\n  doc: \"\"\"\nCreate a persisted operations doc to be later retrieved, usually from a GUI\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    createPersistedQuery(\n      input: {\n        query: $query\n        appId: $appId\n        tags: $tags\n        description: $description\n      }\n    ) {\n      persistedQuery {\n        id\n      }\n    }\n  }\n}\n\nquery ListPersistedQueries(\n  $appId: String!\n  $first: Int!\n  $after: String\n  $tags: [String!]!\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155002\n  \"\"\"\n  doc: \"\"\"\n\n  \"\"\"\n) {\n  oneGraph {\n    app(id: $appId) {\n      id\n      persistedQueries(\n        first: $first\n        after: $after\n        tags: $tags\n      ) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          id\n          query\n          fixedVariables\n          freeVariables\n          allowedOperationNames\n          tags\n          description\n        }\n      }\n    }\n  }\n}\n\nquery PersistedQueriesQuery(\n  $nfToken: String!\n  $appId: String!\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155004\n  \"\"\"\n  doc: \"\"\"\n\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    app(id: $appId) {\n      persistedQueries {\n        nodes {\n          id\n          query\n          allowedOperationNames\n          description\n          freeVariables\n          fixedVariables\n          tags\n        }\n      }\n    }\n  }\n}\n\nquery PersistedQueryQuery(\n  $nfToken: String!\n  $appId: String!\n  $id: String!\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155005\n  \"\"\"\n  doc: \"\"\"\nFetch a persisted doc belonging to appId by its id\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    persistedQuery(appId: $appId, id: $id) {\n      id\n      query\n      allowedOperationNames\n      description\n      freeVariables\n      fixedVariables\n      tags\n    }\n  }\n}\n\nmutation CreateCLISessionMutation(\n  $nfToken: String!\n  $appId: String!\n  $name: String!\n  $metadata: JSON\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155006\n  \"\"\"\n  doc: \"\"\"\nRegister a new CLI session with OneGraph\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    createNetlifyCliSession(\n      input: {\n        appId: $appId\n        name: $name\n        metadata: $metadata\n      }\n    ) {\n      session {\n        id\n        appId\n        netlifyUserId\n        name\n        cliHeartbeatIntervalMs\n      }\n    }\n  }\n}\n\nmutation UpdateCLISessionMetadataMutation(\n  $nfToken: String!\n  $sessionId: String!\n  $metadata: JSON!\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155007\n  \"\"\"\n  doc: \"\"\"\nUpdate the CLI session with new metadata (e.g. the latest docId) by its id\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    updateNetlifyCliSession(\n      input: { id: $sessionId, metadata: $metadata }\n    ) {\n      session {\n        id\n        name\n        metadata\n        cliHeartbeatIntervalMs\n      }\n    }\n  }\n}\n\nmutation CreateCLISessionEventMutation(\n  $nfToken: String!\n  $sessionId: String!\n  $payload: JSON!\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155008\n  \"\"\"\n  doc: \"\"\"\n\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    createNetlifyCliTestEvent(\n      input: {\n        data: { payload: $payload }\n        sessionId: $sessionId\n      }\n    ) {\n      event {\n        id\n        createdAt\n        sessionId\n      }\n    }\n  }\n}\n\nquery CLISessionQuery(\n  $nfToken: String!\n  $sessionId: String!\n  $first: Int!\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155009\n  \"\"\"\n  doc: \"\"\"\n\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    __typename\n    netlifyCliSession(id: $sessionId) {\n      appId\n      createdAt\n      id\n      cliHeartbeatIntervalMs\n      events(first: $first) {\n        __typename\n        createdAt\n        id\n        sessionId\n        ... on OneGraphNetlifyCliSessionLogEvent {\n          id\n          message\n          sessionId\n          createdAt\n        }\n        ... on OneGraphNetlifyCliSessionTestEvent {\n          id\n          createdAt\n          payload\n          sessionId\n        }\n      }\n      lastEventAt\n      metadata\n      name\n      netlifyUserId\n    }\n  }\n}\n\nmutation AckCLISessionEventMutation(\n  $nfToken: String!\n  $sessionId: String!\n  $eventIds: [String!]!\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155010\n  \"\"\"\n  doc: \"\"\"\nAcknowledge CLI events that have been processed and delete them from the upstream queue\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    ackNetlifyCliEvents(\n      input: { eventIds: $eventIds, sessionId: $sessionId }\n    ) {\n      events {\n        id\n      }\n    }\n  }\n}\n\nquery AppSchemaQuery($nfToken: String!, $appId: String!)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155011\n  \"\"\"\n  doc: \"\"\"\nFetch the schema metadata for a site (enabled services, id, etc.)\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    app(id: $appId) {\n      graphQLSchema {\n        appId\n        createdAt\n        id\n        services {\n          friendlyServiceName\n          logoUrl\n          service\n          slug\n          supportsCustomRedirectUri\n          supportsCustomServiceAuth\n          supportsOauthLogin\n        }\n        updatedAt\n      }\n    }\n  }\n}\n\nmutation UpsertAppForSiteMutation(\n  $nfToken: String!\n  $siteId: String!\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155012\n  \"\"\"\n  doc: \"\"\"\nIf a site does not exists upstream in OneGraph for the given site, create it\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    upsertAppForNetlifySite(\n      input: { netlifySiteId: $siteId }\n    ) {\n      org {\n        id\n        name\n      }\n      app {\n        id\n        name\n        corsOrigins\n        customCorsOrigins {\n          friendlyServiceName\n          displayName\n          encodedValue\n        }\n      }\n    }\n  }\n}\n\nmutation CreateNewSchemaMutation(\n  $nfToken: String!\n  $input: OneGraphCreateGraphQLSchemaInput!\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155013\n  \"\"\"\n  doc: \"\"\"\nCreate a new schema in OneGraph for the given site with the specified metadata (enabled services, etc.)\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    createGraphQLSchema(input: $input) {\n      app {\n        graphQLSchema {\n          id\n        }\n      }\n      graphqlSchema {\n        id\n        services {\n          friendlyServiceName\n          logoUrl\n          service\n          slug\n          supportsCustomRedirectUri\n          supportsCustomServiceAuth\n          supportsOauthLogin\n        }\n      }\n    }\n  }\n}\n\n# Resurrect a session / update heartbeat\nmutation MarkCLISessionActiveHeartbeat(\n  $nfToken: String!\n  $id: String!\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155014\n  \"\"\"\n  doc: \"\"\"\nMark a CLI session as active and update the session's heartbeat\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    updateNetlifyCliSession(\n      input: { status: ACTIVE, id: $id }\n    ) {\n      session {\n        id\n        status\n        createdAt\n        updatedAt\n        cliHeartbeatIntervalMs\n      }\n    }\n  }\n}\n\n# Mutation to mark the session as inactive. Can be called when the CLI exits\nmutation MarkCLISessionInactive(\n  $nfToken: String!\n  $id: String!\n)\n@netlify(\n  id: \"\"\"\n  12b5bdea-9bab-4124-a731-5e697b155015\n  \"\"\"\n  doc: \"\"\"\nMark a CLI session as inactive\n  \"\"\"\n) {\n  oneGraph(\n    auths: { netlifyAuth: { oauthToken: $nfToken } }\n  ) {\n    updateNetlifyCliSession(\n      input: { status: INACTIVE, id: $id }\n    ) {\n      session {\n        id\n        status\n        createdAt\n        updatedAt\n        cliHeartbeatIntervalMs\n      }\n    }\n  }\n}";
var httpFetch = function (siteId, options) {
    var reqBody = options.body || null;
    var userHeaders = options.headers || {};
    var headers = __assign(__assign({}, userHeaders), { "Content-Type": "application/json" });
    var reqOptions = {
        method: "POST",
        headers: headers,
        timeout: 30000,
        body: reqBody,
    };
    var url = "https://serve.onegraph.com/graphql?app_id=" + siteId + "&show_metrics=false";
    var httpOkLow = 200;
    var httpOkHigh = 299;
    return fetch(url, reqOptions).then(function (response) {
        if (response.status < httpOkLow || response.status > httpOkHigh) {
            internalConsole.debug("Response: " + JSON.stringify(respBody, null, 2));
            internalConsole.error("Netlify Graph upstream return invalid HTTP status code: " + resp.status);
        }
        return response.text();
    });
};
var fetchNetlifyGraph = function fetchNetlifyGraph(input) {
    return __awaiter(this, void 0, void 0, function () {
        var query, operationName, variables, options, accessToken, siteId, payload, responseText, result, networkError_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    query = input.query;
                    operationName = input.operationName;
                    variables = input.variables;
                    options = input.options || {};
                    accessToken = options.accessToken;
                    siteId = options.siteId || process.env.SITE_ID;
                    payload = {
                        query: query,
                        variables: variables,
                        operationName: operationName,
                    };
                    if (!options.siteId) {
                        internalConsole.warn("No siteId provided");
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, httpFetch(siteId, {
                            method: "POST",
                            headers: {
                                Authorization: accessToken ? "Bearer " + accessToken : "",
                            },
                            body: JSON.stringify(payload),
                        })];
                case 2:
                    responseText = _a.sent();
                    result = JSON.parse(responseText);
                    if (result.errors) {
                        internalConsole.warn("Errors seen fetching Netlify Graph upstream for " + operationName + ": " + JSON.stringify(result.errors, null, 2));
                    }
                    return [2 /*return*/, result];
                case 3:
                    networkError_1 = _a.sent();
                    console.warn("Network error:", networkError_1);
                    internalConsole.warn("Network error fetching Netlify Graph upstream: " + JSON.stringify(networkError_1, null, 2));
                    return [2 /*return*/, {}];
                case 4: return [2 /*return*/];
            }
        });
    });
};
var executeCreatePersistedQueryMutation = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "CreatePersistedQueryMutation",
        variables: variables,
        options: options || {},
    });
};
exports.executeCreatePersistedQueryMutation = executeCreatePersistedQueryMutation;
var fetchListPersistedQueries = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "ListPersistedQueries",
        variables: variables,
        options: options || {},
    });
};
exports.fetchListPersistedQueries = fetchListPersistedQueries;
var fetchPersistedQueriesQuery = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "PersistedQueriesQuery",
        variables: variables,
        options: options || {},
    });
};
exports.fetchPersistedQueriesQuery = fetchPersistedQueriesQuery;
var fetchPersistedQueryQuery = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "PersistedQueryQuery",
        variables: variables,
        options: options || {},
    });
};
exports.fetchPersistedQueryQuery = fetchPersistedQueryQuery;
var executeCreateCLISessionMutation = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "CreateCLISessionMutation",
        variables: variables,
        options: options || {},
    });
};
exports.executeCreateCLISessionMutation = executeCreateCLISessionMutation;
var executeUpdateCLISessionMetadataMutation = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "UpdateCLISessionMetadataMutation",
        variables: variables,
        options: options || {},
    });
};
exports.executeUpdateCLISessionMetadataMutation = executeUpdateCLISessionMetadataMutation;
var executeCreateCLISessionEventMutation = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "CreateCLISessionEventMutation",
        variables: variables,
        options: options || {},
    });
};
exports.executeCreateCLISessionEventMutation = executeCreateCLISessionEventMutation;
var fetchCLISessionQuery = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "CLISessionQuery",
        variables: variables,
        options: options || {},
    });
};
exports.fetchCLISessionQuery = fetchCLISessionQuery;
var executeAckCLISessionEventMutation = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "AckCLISessionEventMutation",
        variables: variables,
        options: options || {},
    });
};
exports.executeAckCLISessionEventMutation = executeAckCLISessionEventMutation;
var fetchAppSchemaQuery = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "AppSchemaQuery",
        variables: variables,
        options: options || {},
    });
};
exports.fetchAppSchemaQuery = fetchAppSchemaQuery;
var executeUpsertAppForSiteMutation = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "UpsertAppForSiteMutation",
        variables: variables,
        options: options || {},
    });
};
exports.executeUpsertAppForSiteMutation = executeUpsertAppForSiteMutation;
var executeCreateNewSchemaMutation = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "CreateNewSchemaMutation",
        variables: variables,
        options: options || {},
    });
};
exports.executeCreateNewSchemaMutation = executeCreateNewSchemaMutation;
var executeMarkCLISessionActiveHeartbeat = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "MarkCLISessionActiveHeartbeat",
        variables: variables,
        options: options || {},
    });
};
exports.executeMarkCLISessionActiveHeartbeat = executeMarkCLISessionActiveHeartbeat;
var executeMarkCLISessionInactive = function (variables, options) {
    return fetchNetlifyGraph({
        query: operationsDoc,
        operationName: "MarkCLISessionInactive",
        variables: variables,
        options: options || {},
    });
};
exports.executeMarkCLISessionInactive = executeMarkCLISessionInactive;
/**
 * The generated NetlifyGraph library with your operations
 */
var functions = {
    /**
     * Acknowledge CLI events that have been processed and delete them from the upstream queue
     */
    executeAckCLISessionEventMutation: exports.executeAckCLISessionEventMutation,
    /**
     *
     */
    executeCreateCLISessionEventMutation: exports.executeCreateCLISessionEventMutation,
    /**
     * Register a new CLI session with OneGraph
     */
    executeCreateCLISessionMutation: exports.executeCreateCLISessionMutation,
    /**
     * Create a new schema in OneGraph for the given site with the specified metadata (enabled services, etc.)
     */
    executeCreateNewSchemaMutation: exports.executeCreateNewSchemaMutation,
    /**
     * Create a persisted operations doc to be later retrieved, usually from a GUI
     */
    executeCreatePersistedQueryMutation: exports.executeCreatePersistedQueryMutation,
    /**
     * Mark a CLI session as active and update the session's heartbeat
     */
    executeMarkCLISessionActiveHeartbeat: exports.executeMarkCLISessionActiveHeartbeat,
    /**
     * Mark a CLI session as inactive
     */
    executeMarkCLISessionInactive: exports.executeMarkCLISessionInactive,
    /**
     * Update the CLI session with new metadata (e.g. the latest docId) by its id
     */
    executeUpdateCLISessionMetadataMutation: exports.executeUpdateCLISessionMetadataMutation,
    /**
     * If a site does not exists upstream in OneGraph for the given site, create it
     */
    executeUpsertAppForSiteMutation: exports.executeUpsertAppForSiteMutation,
    /**
     * Fetch the schema metadata for a site (enabled services, id, etc.)
     */
    fetchAppSchemaQuery: exports.fetchAppSchemaQuery,
    /**
     *
     */
    fetchCLISessionQuery: exports.fetchCLISessionQuery,
    /**
     *
     */
    fetchListPersistedQueries: exports.fetchListPersistedQueries,
    /**
     *
     */
    fetchPersistedQueriesQuery: exports.fetchPersistedQueriesQuery,
    /**
     * Fetch a persisted doc belonging to appId by its id
     */
    fetchPersistedQueryQuery: exports.fetchPersistedQueryQuery,
};
exports.default = functions;
//# sourceMappingURL=generatedOneGraphClient.js.map